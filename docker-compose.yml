x-dagster-common: &dagster_common
  image: scanhub-dagster:latest
  pull_policy: never  # Don't pull the image, use the local build
  build:
    context: ./services/dagster
    args:
      BASE_IMG: ${SCANHUB_BASE_IMAGE}
  environment:
    DAGSTER_HOME: /opt/dagster/dagster_home
    DATA_LAKE_DIRECTORY: /data
  volumes:
    # Persistent storage for Dagster instance data (run logs, schedules, sensors, etc.)
    - dagster_storage:/opt/dagster/dagster_home
    # Mount dagster.yaml config file into the container
    - ./services/dagster/dagster.yaml:/opt/dagster/dagster_home/dagster.yaml
    # Mount the Dagster application source code (repository, jobs, ops, etc.)
    - ./services/dagster:/opt/dagster/app
    # Shared data lake between services
    - ./data_lake:/data

services:
  # SERVICES
  # Workflow manager, device manager and exam manager create data tables in postgres DB
  workflow-manager:
    container_name: workflow-manager
    build: 
      context: ./services/workflow-manager
      args: 
        - BASE_IMG=${SCANHUB_BASE_IMAGE}
    volumes:
      - ./services/workflow-manager/app/:/app/
      # - data_lake:/data
      - ./data_lake:/data
    environment:
      DATA_LAKE_DIRECTORY: /data
    healthcheck:
      # TODO: host.docker.internal is only working with docker desktop, must be replaced in product
      test: ["CMD", "curl", "http://workflow-manager:8000/api/v1/workflowmanager/health/readiness"]
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      scanhub-database:
        condition: service_healthy
      dagster-dagit:
        condition: service_healthy
      dagster-daemon:
        condition: service_healthy

  device-manager:
    container_name: device-manager
    build:
      context: ./services/device-manager
      args: 
        - BASE_IMG=${SCANHUB_BASE_IMAGE}
    volumes:
      - ./services/device-manager/app/:/app/
      - ./data_lake:/data
    environment:
      DATA_LAKE_DIRECTORY: /data
    healthcheck:
      # TODO: host.docker.internal is only working with docker desktop, must be replaced in product
      test: ["CMD", "curl", "http://device-manager:8000/api/v1/device/health/readiness"]
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      scanhub-database:
        condition: service_healthy
    secrets:
      - scanhub_database_postgres_user
      - scanhub_database_postgres_password
      - scanhub_database_postgres_db_name

  exam-manager:
    container_name: exam-manager
    build: 
      context: ./services/exam-manager
      args: 
        - BASE_IMG=${SCANHUB_BASE_IMAGE}
    volumes:
      - ./services/exam-manager/app/:/app/
      - ./data_lake:/data
    healthcheck:
      # TODO: host.docker.internal is only working with docker desktop, must be replaced in product
      test: ["CMD", "curl", "http://exam-manager:8000/api/v1/exam/health/readiness"]
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      scanhub-database:
        condition: service_healthy
      device-manager:
        condition: service_healthy
      workflow-manager:
        condition: service_healthy
    secrets:
      # ScanHub postgres database
      - scanhub_database_postgres_user
      - scanhub_database_postgres_password
      - scanhub_database_postgres_db_name
      # ScanHub sequence database
      - sequence_database_root_username
      - sequence_database_root_password

  patient-manager:
    container_name: patient-manager
    build: 
      context: ./services/patient-manager
      args: 
          - BASE_IMG=${SCANHUB_BASE_IMAGE}
    volumes:
    - ./services/patient-manager/app:/app/
    healthcheck:
      # TODO: host.docker.internal is only working with docker desktop, must be replaced in product
      test: ["CMD", "curl", "http://patient-manager:8100/api/v1/patient/health/readiness"]
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      patient-database:
        condition: service_healthy
    secrets:
      - patient_database_postgres_user
      - patient_database_postgres_password
      - patient_database_postgres_db_name

  user-login-manager:
    container_name: user-login-manager
    build: 
      context: ./services/user-login-manager
      args: 
        - BASE_IMG=${SCANHUB_BASE_IMAGE}
    volumes:
      - ./services/user-login-manager/app/:/app/
    healthcheck:
      # TODO: host.docker.internal is only working with docker desktop, must be replaced in product
      test: ["CMD", "curl", "http://user-login-manager:8000/api/v1/userlogin/health/readiness"]
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      scanhub-database:
        condition: service_healthy
    secrets:
      - scanhub_database_postgres_user
      - scanhub_database_postgres_password
      - scanhub_database_postgres_db_name

  # Add the Gadgetron service
  # gadgetron:
  #   container_name: gadgetron
  #   image: ghcr.io/gadgetron/gadgetron/gadgetron_ubuntu_rt_nocuda:latest
  #   ports:
  #     - 9002:9002
  #   volumes:
  #     - data_lake:/data
  #   environment:
  #     - GADGETRON_HOME=/usr/local/gadgetron
  #     - GADGETRON_PORT=9002
  #   restart: always
  #   depends_on:
  #     - init-data-lake
  #     - scanhub-database

  # Scanhub Postgres Database: Contains exams, procedures, records, jobs, devices and workflows 
  scanhub-database:
    container_name: db-scanhub
    image: postgres:15.2-bullseye
    restart: always # unless-stopped
    volumes:
      - postgres_data_scanhub:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER_FILE: /run/secrets/scanhub_database_postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/scanhub_database_postgres_password
      POSTGRES_DB_FILE: /run/secrets/scanhub_database_postgres_db_name
    healthcheck:  
      # Workflow, device and exam microservices depend on healthy postgres database
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s 
    secrets:
      - scanhub_database_postgres_user
      - scanhub_database_postgres_password
      - scanhub_database_postgres_db_name

  # Patient database
  patient-database:
    container_name: patient-db
    image: postgres:15.2-bullseye
    restart: always
    volumes:
      - postgres_data_patient:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER_FILE: /run/secrets/patient_database_postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/patient_database_postgres_password
      POSTGRES_DB_FILE: /run/secrets/patient_database_postgres_db_name
    healthcheck:  
      # init-db container is started, after health check passed
      test: ["CMD-SHELL", "pg_isready", "-d", "db_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    secrets:
      - patient_database_postgres_user
      - patient_database_postgres_password
      - patient_database_postgres_db_name


  # MRI Sequence mongo database: Contains (pulseq) mri sequence files
  sequence-database:
    container_name: db-sequence
    image: mongo
    restart: always # unless-stopped
    volumes:
      - mongodb_data_sequence:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME_FILE: /run/secrets/sequence_database_root_username
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/sequence_database_root_password
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh sequence-database:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s
    secrets:
      - sequence_database_root_username
      - sequence_database_root_password


  # API Gateway
  nginx:
    container_name: api-gateway
    image: nginx:latest
    ports:
      # Use for development:
      - "8080:8080"
      - "8443:8443"
      # Use for production:
      # - "443:443"
      # - "80:80"
    volumes:
      - ./infrastructure/nginx_config.conf:/etc/nginx/conf.d/default.conf
    healthcheck:
      test: ["CMD", "curl", "http://api-gateway/health"]
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      device-manager:
        condition: service_healthy
      workflow-manager:
        condition: service_healthy
      exam-manager: 
        condition: service_healthy
      patient-manager:
        condition: service_healthy
      user-login-manager:
        condition: service_healthy
      dagster-dagit:
        condition: service_healthy
      scanhub-ui:
        condition: service_healthy
    extra_hosts:                                # somehow needed to find host.docker.internal under linux
      - 'host.docker.internal:host-gateway'     # for the access to host.docker.internal to work the firewall of the host needs to allow incoming connections
    secrets:
      - certificate
      - privatekey
  

  # FRONTEND/SCANHUB-UI
  scanhub-ui:
    container_name: scanhub-ui
    build:
      context: ./scanhub-ui
      dockerfile: ./Dockerfile
      args:
        NODE_ENV: "production" # or "development"
    volumes:
      - ./scanhub-ui/src:/app/src
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # DAGSTER
  dagster-dagit:
    <<: *dagster_common
    container_name: dagster-dagit
    command: ["dagster-webserver", "-h", "0.0.0.0", "-p", "3000", "--path-prefix", "/dagit"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/dagit/server-status"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      dagster-daemon:
        condition: service_healthy

  dagster-daemon:
    <<: *dagster_common
    container_name: dagster-daemon
    user: "0:0"
    entrypoint: ["dagster-daemon", "run"]
    healthcheck:
      test: ["CMD", "pgrep", "-f", "dagster-daemon"]
      interval: 10s
      timeout: 5s
      retries: 5


volumes:
  # data_lake:  # Use bind-mount to inspect files, make sure data_lake/ exists at project root
  mongodb_data_sequence:
  postgres_data_scanhub:
  postgres_data_patient:
  dagster_storage:


secrets:
  scanhub_database_postgres_user:
    file: secrets/scanhub_database_postgres_user.txt
  scanhub_database_postgres_password:
    file: secrets/scanhub_database_postgres_password.txt
  scanhub_database_postgres_db_name:
    file: secrets/scanhub_database_postgres_db_name.txt
  patient_database_postgres_user:
    file: secrets/patient_database_postgres_user.txt
  patient_database_postgres_password:
    file: secrets/patient_database_postgres_password.txt
  patient_database_postgres_db_name:
    file: secrets/patient_database_postgres_db_name.txt
  sequence_database_root_username:
    file: secrets/sequence_database_root_username.txt
  sequence_database_root_password:
    file: secrets/sequence_database_root_password.txt
  certificate:
    file: secrets/certificate.pem
  privatekey:
    file: secrets/privatekey.pem