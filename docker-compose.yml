version: "3.5"
services:

  # Microservices
  # Workflow manager, device manager and exam manager create data tables in postgres DB

  workflow-manager:
    container_name: workflow-manager
    build: ./services/workflow-manager
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    volumes:
      - ./services/workflow-manager/app/:/app/
      - data_lake:/app/data_lake/
    ports:
      - 8001:8000
    environment:
      - DB_URI=postgresql://brainlink:9ArU5*Sr@scanhub-database/sh_db
      - DB_URI_ASYNC=postgresql+asyncpg://brainlink:9ArU5*Sr@scanhub-database/sh_db
    healthcheck:
      # TODO: host.docker.internal is only working with docker desktop, must be replaced in product
      test: ["CMD", "curl", "http://workflow-manager:8000/api/v1/workflow/health/readiness"]
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      scanhub-database:
        condition: service_healthy
      kafka:
        condition: service_healthy


  device-manager:
    container_name: device-manager
    build: ./services/device-manager
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    volumes:
      - ./services/device-manager/app/:/app/
      - data_lake:/app/data_lake/
    ports:
      - 8002:8000
    environment:
      - DB_URI=postgresql://brainlink:9ArU5*Sr@scanhub-database/sh_db
      - DB_URI_ASYNC=postgresql+asyncpg://brainlink:9ArU5*Sr@scanhub-database/sh_db
    healthcheck:
      # TODO: host.docker.internal is only working with docker desktop, must be replaced in product
      test: ["CMD", "curl", "http://device-manager:8000/api/v1/device/health/readiness"]
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      scanhub-database:
        condition: service_healthy


  acquisition-control:
    container_name: acquisition-control
    build: ./services/acquisition-control
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    volumes:
      - ./services/acquisition-control/app/:/app/
    ports:
      # TODO: Order of ports, 8001 - 8005 for exam, device, workflow, sequence and acqisition
      - 8111:8000


  exam-manager:
    container_name: exam-manager
    build: ./services/exam-manager
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    volumes:
      - ./services/exam-manager/app/:/app/
      - data_lake:/app/data_lake/
    ports:
      - 8004:8000
    environment:
      - DB_URI=postgresql://brainlink:9ArU5*Sr@scanhub-database/sh_db
      - DB_URI_ASYNC=postgresql+asyncpg://brainlink:9ArU5*Sr@scanhub-database/sh_db
    healthcheck:
      # TODO: host.docker.internal is only working with docker desktop, must be replaced in product
      test: ["CMD", "curl", "http://exam-manager:8000/api/v1/exam/health/readiness"]
      interval: 5s
      timeout: 5s
      retries: 10
    depends_on:
      scanhub-database:
        condition: service_healthy
      device-manager:
        condition: service_healthy
      workflow-manager:
        condition: service_healthy


  # MRI Sequence Service
  sequence-manager:
    container_name: sequence-manager
    build: ./services/mri/sequence-manager
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    volumes:
      - ./services/mri/sequence-manager/app/:/app/
      - data_lake:/app/data_lake/
    ports:
      - 8003:8000
    environment:
      - MONGODB_USER=root
      - MONGODB_PASSWORD=example
      - MONGODB_HOST=sequence-database
      - MONGODB_PORT=27017
      - MONGODB_DB=mri_sequences_db
      - MONGODB_COLLECTION_NAME=mri_sequences
    depends_on:
      sequence-database:
        condition: service_healthy


  # MRI Reconstruction Services
  cartesian-reco-service:
    container_name: service-cartesian-reco
    build: ./services/mri/recos/cartesian-reco-service
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    environment:
      - KAFKA_TOPIC_SUBSCRIPTION=mri_cartesian_reco
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./services/mri/recos/cartesian-reco-service/app/:/app/
      - data_lake:/app/data_lake/


  # Databases
  # Scanhub Postgres Database: Contains exams, procedures, records, jobs, devices and workflows 
  scanhub-database:
    container_name: db-scanhub
    image: postgres:15.2-bullseye
    restart: always # unless-stopped
    volumes:
      - postgres_data_scanhub:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: brainlink
      POSTGRES_PASSWORD: 9ArU5*Sr
      POSTGRES_DB: sh_db
    healthcheck:  
      # Workflow, device and exam microservices depend on healthy postgres database
      test: ["CMD-SHELL", "pg_isready"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s 
    ports:
      - "5433:5432"


  # MRI Sequence mongo database: Contains (pulseq) mri sequence files
  sequence-database:
    container_name: db-sequence
    image: mongo
    restart: always # unless-stopped
    volumes:
      - mongodb_data_sequence:/data/db
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: root
    #   MONGO_INITDB_ROOT_PASSWORD: 9ArU5*Sr
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh sequence-database:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 20s
    ports:
      - "27017:27017"


  # API Gateway
  nginx:
    container_name: api-gateway
    image: nginx:latest
    ports:
      - "8080:8080"
    volumes:
      - ./infrastructure/nginx_config.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      device-manager:
        condition: service_healthy
      workflow-manager:
        condition: service_healthy
      exam-manager: 
        condition: service_healthy
      sequence-manager:
        condition: service_started
      acquisition-control:
        condition: service_started


  # Message Broker (Kafka)
  kafka:
    container_name: message-broker
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 5s
      timeout: 5s
      retries: 10


volumes:
  data_lake:
  mongodb_data_sequence:
  postgres_data_scanhub:
  kafka_data:
    driver: local
