version: "3"
services:
  # MRI Services
  mri_scancontrol:
    container_name: mri-scancontrol
    build: ./services/mri/scancontrol
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    volumes:
      - ./services/mri/scancontrol/app/:/app/
      - data_lake:/app/data_lake/
    ports:
      - 8005:8000

  # MRI Reconstruction Services
  cartesian-reco-service:
    container_name: service-cartesian-reco
    build: ./services/mri/recos/cartesian-reco-service
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    environment:
      - KAFKA_TOPIC_SUBSCRIPTION=mri_cartesian_reco
    depends_on:
      - broker
    volumes:
      - ./services/mri/recos/cartesian-reco-service/app/:/app/
      - data_lake:/app/data_lake/

  sequence-manager:
    container_name: sequence-manager
    build: ./services/mri/sequence-manager
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    volumes:
      - ./services/mri/sequence-manager/app/:/app/
      - data_lake:/app/data_lake/
    ports:
      - 8003:8000
    environment:
      - MONGODB_USER=root
      - MONGODB_PASSWORD=example
      - MONGODB_HOST=sequence-database
      - MONGODB_PORT=27017
      - MONGODB_DB=mri_sequences_db
      - MONGODB_COLLECTION_NAME=mri_sequences
    depends_on:
      - sequence-database
      - broker

  # Microservices
  # Workflow manager, device manager and exam manager create data tables in postgres DB
  # (!) TODO: Fix dependencies, table creation in workflow and exam manager require a restart of the service
  workflow-manager:
    container_name: workflow-manager
    build: ./services/workflow-manager
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    volumes:
      - ./services/workflow-manager/app/:/app/
      - data_lake:/app/data_lake/
    ports:
      - 8001:8000
    environment:
      - DB_URI=postgresql://brainlink:9ArU5*Sr@scanhub-database/sh_db
      - DB_URI_ASYNC=postgresql+asyncpg://brainlink:9ArU5*Sr@scanhub-database/sh_db
    depends_on:
      sequence-database:
        condition: service_healthy
      scanhub-database:
        condition: service_healthy
      broker:
        condition: service_started

  device-manager:
    container_name: device-manager
    build: ./services/device-manager
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    volumes:
      - ./services/device-manager/app/:/app/
      - data_lake:/app/data_lake/
    ports:
      - 8002:8000
    environment:
      - DB_URI=postgresql://brainlink:9ArU5*Sr@scanhub-database/sh_db
      - DB_URI_ASYNC=postgresql+asyncpg://brainlink:9ArU5*Sr@scanhub-database/sh_db
    depends_on:
      sequence-database:
        condition: service_healthy
      scanhub-database:
        condition: service_healthy

  exam-manager:
    container_name: exam-manager
    build: ./services/exam-manager
    command: uvicorn main:app --reload --host 0.0.0.0 --port 8000
    volumes:
      - ./services/exam-manager/app/:/app/
      - data_lake:/app/data_lake/
    ports:
      - 8004:8000
    environment:
      - DB_URI=postgresql://brainlink:9ArU5*Sr@scanhub-database/sh_db
      - DB_URI_ASYNC=postgresql+asyncpg://brainlink:9ArU5*Sr@scanhub-database/sh_db
    depends_on:
      sequence-database:
        condition: service_healthy
      scanhub-database:
        condition: service_healthy
      device-manager:
        condition: service_started
      workflow-manager:
        condition: service_started

  #*************************************************************************************
  # Databases
  #*************************************************************************************
  
  # Scanhub Database
  scanhub-database:
    container_name: db-scanhub
    image: postgres:15.2-bullseye
    restart: always # unless-stopped
    volumes:
      - postgres_data_scanhub:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: brainlink
      POSTGRES_PASSWORD: 9ArU5*Sr
      POSTGRES_DB: sh_db
    healthcheck:  
      # init-db container is started, after health check passed
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s 
    ports:
      - "5433:5432"

  # MRI Database
  sequence-database:
    container_name: db-sequence
    image: mongo
    restart: always # unless-stopped
    volumes:
      - mongodb_data_sequence:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    ports:
      - "27017:27017"

  ## API Gateway
  nginx:
    container_name: api-gateway
    image: nginx:latest
    ports:
      - "8080:8080"
    volumes:
      - ./infrastructure/nginx_config.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      # - workflow-manager
      - device-manager
      # - sequence-manager
      # - mri_scancontrol
      - exam-manager

## Kafka Services
  zookeeper:
    container_name: kafka-zookeeper
    image: confluentinc/cp-zookeeper:7.3.1
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    container_name: kafka-broker
    image: confluentinc/cp-kafka:7.3.1
    hostname: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT_CONTAINER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092,PLAINTEXT_CONTAINER://kafka-broker:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  # control-center:
  #   container_name: kafka-control-center
  #   image: confluentinc/cp-enterprise-control-center:7.3.1
  #   hostname: control-center
  #   depends_on:
  #     - broker
  #   ports:
  #     - "9021:9021"
  #   environment:
  #     CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
  #     CONTROL_CENTER_REPLICATION_FACTOR: 1
  #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
  #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
  #     CONFLUENT_METRICS_TOPIC_REPLICATION: 1
  #     PORT: 9021


volumes:
  data_lake:
  mongodb_data_sequence:
  postgres_data_scanhub:
