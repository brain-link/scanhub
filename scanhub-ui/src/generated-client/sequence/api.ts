/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * A class representing an MRI sequence definition file and its associated metadata.  Attributes ----------     id: The unique identifier for the MRI sequence, autogenerated by MongoDB.     name: The name of the MRI sequence.     description: A brief description of the MRI sequence.     sequence_type: The type of MRI sequence, such as T1-weighted, T2-weighted, etc.     created_at: The timestamp of when the MRI sequence was created.     updated_at: The timestamp of when the MRI sequence was last updated.     tags: A list of tags or keywords associated with the MRI sequence, useful for searching and filtering.     file: The MRI sequence definition file content or a reference to the stored file,     such as a GridFS identifier or an S3 URL.     file_extension: The file extension of the MRI sequence definition file.
 * @export
 * @interface MRISequence
 */
export interface MRISequence {
    /**
     * 
     * @type {string}
     * @memberof MRISequence
     */
    '_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof MRISequence
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof MRISequence
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof MRISequence
     */
    'sequence_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof MRISequence
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof MRISequence
     */
    'updated_at'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof MRISequence
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {any}
     * @memberof MRISequence
     */
    'file'?: any;
    /**
     * 
     * @type {string}
     * @memberof MRISequence
     */
    'file_extension'?: string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Perform a health check for the microservice.  Parameters ---------- is_db_connected: bool     The status of the database connection.  Returns -------     The status of the microservice.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1MriSequencesHealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/mri/sequences/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * Perform a health check for the microservice.  Parameters ---------- is_db_connected: bool     The status of the database connection.  Returns -------     The status of the microservice.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckApiV1MriSequencesHealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheckApiV1MriSequencesHealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.healthCheckApiV1MriSequencesHealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * Perform a health check for the microservice.  Parameters ---------- is_db_connected: bool     The status of the database connection.  Returns -------     The status of the microservice.
         * @summary Health Check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1MriSequencesHealthGet(options?: any): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.healthCheckApiV1MriSequencesHealthGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * Perform a health check for the microservice.  Parameters ---------- is_db_connected: bool     The status of the database connection.  Returns -------     The status of the microservice.
     * @summary Health Check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public healthCheckApiV1MriSequencesHealthGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).healthCheckApiV1MriSequencesHealthGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MRISequencesApi - axios parameter creator
 * @export
 */
export const MRISequencesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new MRI sequence and store it in the database.  Parameters ---------- mri_sequence : MRISequence     The MRI sequence data to store. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- MRISequence     The created MRI sequence.
         * @summary Create Mri Sequence Endpoint
         * @param {MRISequence} mRISequence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMriSequenceEndpointApiV1MriSequencesPost: async (mRISequence: MRISequence, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mRISequence' is not null or undefined
            assertParamExists('createMriSequenceEndpointApiV1MriSequencesPost', 'mRISequence', mRISequence)
            const localVarPath = `/api/v1/mri/sequences/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mRISequence, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an MRI sequence by its ID.  Parameters ---------- mri_sequence_id : str     The ID of the MRI sequence to delete. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- None
         * @summary Delete Mri Sequence Endpoint
         * @param {string} mriSequenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMriSequenceEndpointApiV1MriSequencesMriSequenceIdDelete: async (mriSequenceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mriSequenceId' is not null or undefined
            assertParamExists('deleteMriSequenceEndpointApiV1MriSequencesMriSequenceIdDelete', 'mriSequenceId', mriSequenceId)
            const localVarPath = `/api/v1/mri/sequences/{mri_sequence_id}`
                .replace(`{${"mri_sequence_id"}}`, encodeURIComponent(String(mriSequenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an MRI sequence by its ID.  Parameters ---------- mri_sequence_id : str     The ID of the MRI sequence to retrieve. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- MRISequence     The retrieved MRI sequence.
         * @summary Get Mri Sequence By Id Endpoint
         * @param {string} mriSequenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMriSequenceByIdEndpointApiV1MriSequencesMriSequenceIdGet: async (mriSequenceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mriSequenceId' is not null or undefined
            assertParamExists('getMriSequenceByIdEndpointApiV1MriSequencesMriSequenceIdGet', 'mriSequenceId', mriSequenceId)
            const localVarPath = `/api/v1/mri/sequences/{mri_sequence_id}`
                .replace(`{${"mri_sequence_id"}}`, encodeURIComponent(String(mriSequenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve an MRI sequence file by its ID.  Parameters ---------- mri_sequence_id : str     The ID of the MRI sequence to retrieve. background_tasks : BackgroundTasks     The background tasks to run. name : str     The name of the file to download. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- FileResponse     The retrieved MRI sequence file.
         * @summary Get Mri Sequence File By Id Endpoint
         * @param {string} mriSequenceId 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMriSequenceFileByIdEndpointApiV1MriSequencesMriSequenceFileMriSequenceIdGet: async (mriSequenceId: string, name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mriSequenceId' is not null or undefined
            assertParamExists('getMriSequenceFileByIdEndpointApiV1MriSequencesMriSequenceFileMriSequenceIdGet', 'mriSequenceId', mriSequenceId)
            const localVarPath = `/api/v1/mri/sequences/mri-sequence-file/{mri_sequence_id}`
                .replace(`{${"mri_sequence_id"}}`, encodeURIComponent(String(mriSequenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a list of all MRI sequences from the database.  Parameters ---------- database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- List[MRISequence]     The list of MRI sequences.
         * @summary Get Mri Sequences Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMriSequencesEndpointApiV1MriSequencesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/mri/sequences/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generate plotly sequence plot data.  Parameters ---------- seq_id     Id of the sequence to be plotted  Returns -------     List of plot data models for plotly
         * @summary Plot Mri Sequence
         * @param {string} seqId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plotMriSequenceApiV1MriSequencesMriSequencePlotSeqIdGet: async (seqId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'seqId' is not null or undefined
            assertParamExists('plotMriSequenceApiV1MriSequencesMriSequencePlotSeqIdGet', 'seqId', seqId)
            const localVarPath = `/api/v1/mri/sequences/mri-sequence-plot/{seq_id}`
                .replace(`{${"seq_id"}}`, encodeURIComponent(String(seqId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an MRI sequence with new data.  Parameters ---------- mri_sequence_id : str     The ID of the MRI sequence to update. mri_sequence : MRISequence     The updated MRI sequence data. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- MRISequence     The updated MRI sequence.
         * @summary Update Mri Sequence Endpoint
         * @param {string} mriSequenceId 
         * @param {MRISequence} mRISequence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMriSequenceEndpointApiV1MriSequencesMriSequenceIdPut: async (mriSequenceId: string, mRISequence: MRISequence, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mriSequenceId' is not null or undefined
            assertParamExists('updateMriSequenceEndpointApiV1MriSequencesMriSequenceIdPut', 'mriSequenceId', mriSequenceId)
            // verify required parameter 'mRISequence' is not null or undefined
            assertParamExists('updateMriSequenceEndpointApiV1MriSequencesMriSequenceIdPut', 'mRISequence', mRISequence)
            const localVarPath = `/api/v1/mri/sequences/{mri_sequence_id}`
                .replace(`{${"mri_sequence_id"}}`, encodeURIComponent(String(mriSequenceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mRISequence, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload an MRI sequence file and store it with the provided metadata.  Parameters ---------- mri_sequence : MRISequenceCreate     The MRI sequence metadata. file : UploadFile     The MRI sequence file to store. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- MRISequence     The stored MRI sequence with the uploaded file.
         * @summary Upload Mri Sequence File
         * @param {File} file 
         * @param {string} name 
         * @param {string} [description] 
         * @param {string} [sequenceType] 
         * @param {string} [tags] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMriSequenceFileApiV1MriSequencesUploadPost: async (file: File, name: string, description?: string, sequenceType?: string, tags?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadMriSequenceFileApiV1MriSequencesUploadPost', 'file', file)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('uploadMriSequenceFileApiV1MriSequencesUploadPost', 'name', name)
            const localVarPath = `/api/v1/mri/sequences/upload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('description', description as any);
            }
    
            if (sequenceType !== undefined) { 
                localVarFormParams.append('sequence_type', sequenceType as any);
            }
    
            if (tags !== undefined) { 
                localVarFormParams.append('tags', tags as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MRISequencesApi - functional programming interface
 * @export
 */
export const MRISequencesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MRISequencesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new MRI sequence and store it in the database.  Parameters ---------- mri_sequence : MRISequence     The MRI sequence data to store. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- MRISequence     The created MRI sequence.
         * @summary Create Mri Sequence Endpoint
         * @param {MRISequence} mRISequence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMriSequenceEndpointApiV1MriSequencesPost(mRISequence: MRISequence, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MRISequence>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMriSequenceEndpointApiV1MriSequencesPost(mRISequence, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MRISequencesApi.createMriSequenceEndpointApiV1MriSequencesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an MRI sequence by its ID.  Parameters ---------- mri_sequence_id : str     The ID of the MRI sequence to delete. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- None
         * @summary Delete Mri Sequence Endpoint
         * @param {string} mriSequenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMriSequenceEndpointApiV1MriSequencesMriSequenceIdDelete(mriSequenceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMriSequenceEndpointApiV1MriSequencesMriSequenceIdDelete(mriSequenceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MRISequencesApi.deleteMriSequenceEndpointApiV1MriSequencesMriSequenceIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve an MRI sequence by its ID.  Parameters ---------- mri_sequence_id : str     The ID of the MRI sequence to retrieve. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- MRISequence     The retrieved MRI sequence.
         * @summary Get Mri Sequence By Id Endpoint
         * @param {string} mriSequenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMriSequenceByIdEndpointApiV1MriSequencesMriSequenceIdGet(mriSequenceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MRISequence>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMriSequenceByIdEndpointApiV1MriSequencesMriSequenceIdGet(mriSequenceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MRISequencesApi.getMriSequenceByIdEndpointApiV1MriSequencesMriSequenceIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve an MRI sequence file by its ID.  Parameters ---------- mri_sequence_id : str     The ID of the MRI sequence to retrieve. background_tasks : BackgroundTasks     The background tasks to run. name : str     The name of the file to download. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- FileResponse     The retrieved MRI sequence file.
         * @summary Get Mri Sequence File By Id Endpoint
         * @param {string} mriSequenceId 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMriSequenceFileByIdEndpointApiV1MriSequencesMriSequenceFileMriSequenceIdGet(mriSequenceId: string, name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMriSequenceFileByIdEndpointApiV1MriSequencesMriSequenceFileMriSequenceIdGet(mriSequenceId, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MRISequencesApi.getMriSequenceFileByIdEndpointApiV1MriSequencesMriSequenceFileMriSequenceIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a list of all MRI sequences from the database.  Parameters ---------- database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- List[MRISequence]     The list of MRI sequences.
         * @summary Get Mri Sequences Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMriSequencesEndpointApiV1MriSequencesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MRISequence>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMriSequencesEndpointApiV1MriSequencesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MRISequencesApi.getMriSequencesEndpointApiV1MriSequencesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Generate plotly sequence plot data.  Parameters ---------- seq_id     Id of the sequence to be plotted  Returns -------     List of plot data models for plotly
         * @summary Plot Mri Sequence
         * @param {string} seqId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async plotMriSequenceApiV1MriSequencesMriSequencePlotSeqIdGet(seqId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.plotMriSequenceApiV1MriSequencesMriSequencePlotSeqIdGet(seqId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MRISequencesApi.plotMriSequenceApiV1MriSequencesMriSequencePlotSeqIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an MRI sequence with new data.  Parameters ---------- mri_sequence_id : str     The ID of the MRI sequence to update. mri_sequence : MRISequence     The updated MRI sequence data. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- MRISequence     The updated MRI sequence.
         * @summary Update Mri Sequence Endpoint
         * @param {string} mriSequenceId 
         * @param {MRISequence} mRISequence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMriSequenceEndpointApiV1MriSequencesMriSequenceIdPut(mriSequenceId: string, mRISequence: MRISequence, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MRISequence>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMriSequenceEndpointApiV1MriSequencesMriSequenceIdPut(mriSequenceId, mRISequence, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MRISequencesApi.updateMriSequenceEndpointApiV1MriSequencesMriSequenceIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload an MRI sequence file and store it with the provided metadata.  Parameters ---------- mri_sequence : MRISequenceCreate     The MRI sequence metadata. file : UploadFile     The MRI sequence file to store. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- MRISequence     The stored MRI sequence with the uploaded file.
         * @summary Upload Mri Sequence File
         * @param {File} file 
         * @param {string} name 
         * @param {string} [description] 
         * @param {string} [sequenceType] 
         * @param {string} [tags] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadMriSequenceFileApiV1MriSequencesUploadPost(file: File, name: string, description?: string, sequenceType?: string, tags?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MRISequence>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadMriSequenceFileApiV1MriSequencesUploadPost(file, name, description, sequenceType, tags, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MRISequencesApi.uploadMriSequenceFileApiV1MriSequencesUploadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MRISequencesApi - factory interface
 * @export
 */
export const MRISequencesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MRISequencesApiFp(configuration)
    return {
        /**
         * Create a new MRI sequence and store it in the database.  Parameters ---------- mri_sequence : MRISequence     The MRI sequence data to store. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- MRISequence     The created MRI sequence.
         * @summary Create Mri Sequence Endpoint
         * @param {MRISequence} mRISequence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMriSequenceEndpointApiV1MriSequencesPost(mRISequence: MRISequence, options?: any): AxiosPromise<MRISequence> {
            return localVarFp.createMriSequenceEndpointApiV1MriSequencesPost(mRISequence, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an MRI sequence by its ID.  Parameters ---------- mri_sequence_id : str     The ID of the MRI sequence to delete. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- None
         * @summary Delete Mri Sequence Endpoint
         * @param {string} mriSequenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMriSequenceEndpointApiV1MriSequencesMriSequenceIdDelete(mriSequenceId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMriSequenceEndpointApiV1MriSequencesMriSequenceIdDelete(mriSequenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an MRI sequence by its ID.  Parameters ---------- mri_sequence_id : str     The ID of the MRI sequence to retrieve. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- MRISequence     The retrieved MRI sequence.
         * @summary Get Mri Sequence By Id Endpoint
         * @param {string} mriSequenceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMriSequenceByIdEndpointApiV1MriSequencesMriSequenceIdGet(mriSequenceId: string, options?: any): AxiosPromise<MRISequence> {
            return localVarFp.getMriSequenceByIdEndpointApiV1MriSequencesMriSequenceIdGet(mriSequenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve an MRI sequence file by its ID.  Parameters ---------- mri_sequence_id : str     The ID of the MRI sequence to retrieve. background_tasks : BackgroundTasks     The background tasks to run. name : str     The name of the file to download. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- FileResponse     The retrieved MRI sequence file.
         * @summary Get Mri Sequence File By Id Endpoint
         * @param {string} mriSequenceId 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMriSequenceFileByIdEndpointApiV1MriSequencesMriSequenceFileMriSequenceIdGet(mriSequenceId: string, name?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getMriSequenceFileByIdEndpointApiV1MriSequencesMriSequenceFileMriSequenceIdGet(mriSequenceId, name, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a list of all MRI sequences from the database.  Parameters ---------- database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- List[MRISequence]     The list of MRI sequences.
         * @summary Get Mri Sequences Endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMriSequencesEndpointApiV1MriSequencesGet(options?: any): AxiosPromise<Array<MRISequence>> {
            return localVarFp.getMriSequencesEndpointApiV1MriSequencesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Generate plotly sequence plot data.  Parameters ---------- seq_id     Id of the sequence to be plotted  Returns -------     List of plot data models for plotly
         * @summary Plot Mri Sequence
         * @param {string} seqId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        plotMriSequenceApiV1MriSequencesMriSequencePlotSeqIdGet(seqId: string, options?: any): AxiosPromise<string> {
            return localVarFp.plotMriSequenceApiV1MriSequencesMriSequencePlotSeqIdGet(seqId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an MRI sequence with new data.  Parameters ---------- mri_sequence_id : str     The ID of the MRI sequence to update. mri_sequence : MRISequence     The updated MRI sequence data. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- MRISequence     The updated MRI sequence.
         * @summary Update Mri Sequence Endpoint
         * @param {string} mriSequenceId 
         * @param {MRISequence} mRISequence 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMriSequenceEndpointApiV1MriSequencesMriSequenceIdPut(mriSequenceId: string, mRISequence: MRISequence, options?: any): AxiosPromise<MRISequence> {
            return localVarFp.updateMriSequenceEndpointApiV1MriSequencesMriSequenceIdPut(mriSequenceId, mRISequence, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload an MRI sequence file and store it with the provided metadata.  Parameters ---------- mri_sequence : MRISequenceCreate     The MRI sequence metadata. file : UploadFile     The MRI sequence file to store. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- MRISequence     The stored MRI sequence with the uploaded file.
         * @summary Upload Mri Sequence File
         * @param {File} file 
         * @param {string} name 
         * @param {string} [description] 
         * @param {string} [sequenceType] 
         * @param {string} [tags] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadMriSequenceFileApiV1MriSequencesUploadPost(file: File, name: string, description?: string, sequenceType?: string, tags?: string, options?: any): AxiosPromise<MRISequence> {
            return localVarFp.uploadMriSequenceFileApiV1MriSequencesUploadPost(file, name, description, sequenceType, tags, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MRISequencesApi - object-oriented interface
 * @export
 * @class MRISequencesApi
 * @extends {BaseAPI}
 */
export class MRISequencesApi extends BaseAPI {
    /**
     * Create a new MRI sequence and store it in the database.  Parameters ---------- mri_sequence : MRISequence     The MRI sequence data to store. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- MRISequence     The created MRI sequence.
     * @summary Create Mri Sequence Endpoint
     * @param {MRISequence} mRISequence 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MRISequencesApi
     */
    public createMriSequenceEndpointApiV1MriSequencesPost(mRISequence: MRISequence, options?: RawAxiosRequestConfig) {
        return MRISequencesApiFp(this.configuration).createMriSequenceEndpointApiV1MriSequencesPost(mRISequence, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an MRI sequence by its ID.  Parameters ---------- mri_sequence_id : str     The ID of the MRI sequence to delete. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- None
     * @summary Delete Mri Sequence Endpoint
     * @param {string} mriSequenceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MRISequencesApi
     */
    public deleteMriSequenceEndpointApiV1MriSequencesMriSequenceIdDelete(mriSequenceId: string, options?: RawAxiosRequestConfig) {
        return MRISequencesApiFp(this.configuration).deleteMriSequenceEndpointApiV1MriSequencesMriSequenceIdDelete(mriSequenceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an MRI sequence by its ID.  Parameters ---------- mri_sequence_id : str     The ID of the MRI sequence to retrieve. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- MRISequence     The retrieved MRI sequence.
     * @summary Get Mri Sequence By Id Endpoint
     * @param {string} mriSequenceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MRISequencesApi
     */
    public getMriSequenceByIdEndpointApiV1MriSequencesMriSequenceIdGet(mriSequenceId: string, options?: RawAxiosRequestConfig) {
        return MRISequencesApiFp(this.configuration).getMriSequenceByIdEndpointApiV1MriSequencesMriSequenceIdGet(mriSequenceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve an MRI sequence file by its ID.  Parameters ---------- mri_sequence_id : str     The ID of the MRI sequence to retrieve. background_tasks : BackgroundTasks     The background tasks to run. name : str     The name of the file to download. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- FileResponse     The retrieved MRI sequence file.
     * @summary Get Mri Sequence File By Id Endpoint
     * @param {string} mriSequenceId 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MRISequencesApi
     */
    public getMriSequenceFileByIdEndpointApiV1MriSequencesMriSequenceFileMriSequenceIdGet(mriSequenceId: string, name?: string, options?: RawAxiosRequestConfig) {
        return MRISequencesApiFp(this.configuration).getMriSequenceFileByIdEndpointApiV1MriSequencesMriSequenceFileMriSequenceIdGet(mriSequenceId, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a list of all MRI sequences from the database.  Parameters ---------- database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- List[MRISequence]     The list of MRI sequences.
     * @summary Get Mri Sequences Endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MRISequencesApi
     */
    public getMriSequencesEndpointApiV1MriSequencesGet(options?: RawAxiosRequestConfig) {
        return MRISequencesApiFp(this.configuration).getMriSequencesEndpointApiV1MriSequencesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generate plotly sequence plot data.  Parameters ---------- seq_id     Id of the sequence to be plotted  Returns -------     List of plot data models for plotly
     * @summary Plot Mri Sequence
     * @param {string} seqId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MRISequencesApi
     */
    public plotMriSequenceApiV1MriSequencesMriSequencePlotSeqIdGet(seqId: string, options?: RawAxiosRequestConfig) {
        return MRISequencesApiFp(this.configuration).plotMriSequenceApiV1MriSequencesMriSequencePlotSeqIdGet(seqId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an MRI sequence with new data.  Parameters ---------- mri_sequence_id : str     The ID of the MRI sequence to update. mri_sequence : MRISequence     The updated MRI sequence data. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- MRISequence     The updated MRI sequence.
     * @summary Update Mri Sequence Endpoint
     * @param {string} mriSequenceId 
     * @param {MRISequence} mRISequence 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MRISequencesApi
     */
    public updateMriSequenceEndpointApiV1MriSequencesMriSequenceIdPut(mriSequenceId: string, mRISequence: MRISequence, options?: RawAxiosRequestConfig) {
        return MRISequencesApiFp(this.configuration).updateMriSequenceEndpointApiV1MriSequencesMriSequenceIdPut(mriSequenceId, mRISequence, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload an MRI sequence file and store it with the provided metadata.  Parameters ---------- mri_sequence : MRISequenceCreate     The MRI sequence metadata. file : UploadFile     The MRI sequence file to store. database : AsyncIOMotorDatabase     The MongoDB database handle.  Returns ------- MRISequence     The stored MRI sequence with the uploaded file.
     * @summary Upload Mri Sequence File
     * @param {File} file 
     * @param {string} name 
     * @param {string} [description] 
     * @param {string} [sequenceType] 
     * @param {string} [tags] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MRISequencesApi
     */
    public uploadMriSequenceFileApiV1MriSequencesUploadPost(file: File, name: string, description?: string, sequenceType?: string, tags?: string, options?: RawAxiosRequestConfig) {
        return MRISequencesApiFp(this.configuration).uploadMriSequenceFileApiV1MriSequencesUploadPost(file, name, description, sequenceType, tags, options).then((request) => request(this.axios, this.basePath));
    }
}



