/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Pydantic definition of AcquisitionLimits.
 * @export
 * @interface AcquisitionLimits
 */
export interface AcquisitionLimits {
    /**
     * 
     * @type {number}
     * @memberof AcquisitionLimits
     */
    'patient_height': number;
    /**
     * 
     * @type {number}
     * @memberof AcquisitionLimits
     */
    'patient_weight': number;
    /**
     * 
     * @type {Gender}
     * @memberof AcquisitionLimits
     */
    'Gender'?: Gender;
    /**
     * 
     * @type {number}
     * @memberof AcquisitionLimits
     */
    'patient_age': number;
}


/**
 * Pydantic definition of genders.
 * @export
 * @enum {string}
 */

export const Gender = {
    Male: 'MALE',
    Female: 'FEMALE',
    Other: 'OTHER',
    NotGiven: 'NOT_GIVEN'
} as const;

export type Gender = typeof Gender[keyof typeof Gender];


/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * Pydantic model definition of a scanjob.
 * @export
 * @interface ScanJob
 */
export interface ScanJob {
    /**
     * 
     * @type {number}
     * @memberof ScanJob
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ScanJob
     */
    'sequence_id': string;
    /**
     * 
     * @type {number}
     * @memberof ScanJob
     */
    'workflow_id': number;
    /**
     * 
     * @type {string}
     * @memberof ScanJob
     */
    'device_id': string;
}
/**
 * Pydantic definition of a scanstatus.
 * @export
 * @interface ScanStatus
 */
export interface ScanStatus {
    /**
     * 
     * @type {string}
     * @memberof ScanStatus
     */
    'record_id': string;
    /**
     * 
     * @type {number}
     * @memberof ScanStatus
     */
    'status_percent': number;
}
/**
 * 
 * @export
 * @interface TaskId
 */
export interface TaskId {
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface WorkflowId
 */
export interface WorkflowId {
}

/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Readiness health endpoint.  Inspects sqlalchemy engine and check if workflow table exists.  Returns -------     Status docstring  Raises ------ HTTPException     500: Workflow table does not exist
         * @summary Readiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readinessApiV1WorkflowmanagerHealthReadinessGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/workflowmanager/health/readiness`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * Readiness health endpoint.  Inspects sqlalchemy engine and check if workflow table exists.  Returns -------     Status docstring  Raises ------ HTTPException     500: Workflow table does not exist
         * @summary Readiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readinessApiV1WorkflowmanagerHealthReadinessGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readinessApiV1WorkflowmanagerHealthReadinessGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.readinessApiV1WorkflowmanagerHealthReadinessGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * Readiness health endpoint.  Inspects sqlalchemy engine and check if workflow table exists.  Returns -------     Status docstring  Raises ------ HTTPException     500: Workflow table does not exist
         * @summary Readiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readinessApiV1WorkflowmanagerHealthReadinessGet(options?: any): AxiosPromise<any> {
            return localVarFp.readinessApiV1WorkflowmanagerHealthReadinessGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * Readiness health endpoint.  Inspects sqlalchemy engine and check if workflow table exists.  Returns -------     Status docstring  Raises ------ HTTPException     500: Workflow table does not exist
     * @summary Readiness
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public readinessApiV1WorkflowmanagerHealthReadinessGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).readinessApiV1WorkflowmanagerHealthReadinessGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkflowManagerApi - axios parameter creator
 * @export
 */
export const WorkflowManagerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Download DICOM result.  Parameters ---------- record_id     ID of the record the DICOM file belongs to.  Returns -------     DICOM file response
         * @summary Download Result
         * @param {number} recordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadResultApiV1WorkflowmanagerDownloadRecordIdGet: async (recordId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordId' is not null or undefined
            assertParamExists('downloadResultApiV1WorkflowmanagerDownloadRecordIdGet', 'recordId', recordId)
            const localVarPath = `/api/v1/workflowmanager/download/{record_id}/`
                .replace(`{${"record_id"}}`, encodeURIComponent(String(recordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Receives status for a job. Forwards it to the ui and returns ok.
         * @summary Forward Status
         * @param {ScanStatus} scanStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forwardStatusApiV1WorkflowmanagerForwardStatusPost: async (scanStatus: ScanStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'scanStatus' is not null or undefined
            assertParamExists('forwardStatusApiV1WorkflowmanagerForwardStatusPost', 'scanStatus', scanStatus)
            const localVarPath = `/api/v1/workflowmanager/forward-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scanStatus, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Read image file data and content as streaming response.  Parameters ---------- record_id     Record ID the image should be read for  Returns -------     Image file content  Raises ------ HTTPException     File not found
         * @summary Get Image File
         * @param {number} recordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageFileApiV1WorkflowmanagerImageRecordIdGet: async (recordId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'recordId' is not null or undefined
            assertParamExists('getImageFileApiV1WorkflowmanagerImageRecordIdGet', 'recordId', recordId)
            const localVarPath = `/api/v1/workflowmanager/image/{record_id}/`
                .replace(`{${"record_id"}}`, encodeURIComponent(String(recordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Process a workflow.  Parameters ---------- workflow_id     UUID of the workflow to process  Returns -------     Workflow process response
         * @summary Process
         * @param {WorkflowId} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processApiV1WorkflowmanagerProcessWorkflowIdGet: async (workflowId: WorkflowId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('processApiV1WorkflowmanagerProcessWorkflowIdGet', 'workflowId', workflowId)
            const localVarPath = `/api/v1/workflowmanager/process/{workflow_id}/`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Process a task.  Parameters ---------- task_id     UUID of the task to process  Returns -------     Task process response
         * @summary Process Task
         * @param {TaskId} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processTaskApiV1WorkflowmanagerTaskProcessTaskIdGet: async (taskId: TaskId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('processTaskApiV1WorkflowmanagerTaskProcessTaskIdGet', 'taskId', taskId)
            const localVarPath = `/api/v1/workflowmanager/task/process/{task_id}/`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Receives a job. Create a record id, trigger scan with it and returns it.
         * @summary Start Scan
         * @param {string} taskId 
         * @param {ScanJob} scanJob 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startScanApiV1WorkflowmanagerStartScanPost: async (taskId: string, scanJob: ScanJob, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('startScanApiV1WorkflowmanagerStartScanPost', 'taskId', taskId)
            // verify required parameter 'scanJob' is not null or undefined
            assertParamExists('startScanApiV1WorkflowmanagerStartScanPost', 'scanJob', scanJob)
            const localVarPath = `/api/v1/workflowmanager/start-scan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (taskId !== undefined) {
                localVarQueryParameter['task_id'] = taskId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(scanJob, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload workflow result.  Parameters ---------- workflow_id     Id of the workflow, which is processed by workflow file, optional     Data upload, e.g. reconstruction result, by default File(...)  Returns -------     Notification
         * @summary Upload Result
         * @param {string} workflowId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost: async (workflowId: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost', 'workflowId', workflowId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost', 'file', file)
            const localVarPath = `/api/v1/workflowmanager/upload/{workflow_id}/`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowManagerApi - functional programming interface
 * @export
 */
export const WorkflowManagerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkflowManagerApiAxiosParamCreator(configuration)
    return {
        /**
         * Download DICOM result.  Parameters ---------- record_id     ID of the record the DICOM file belongs to.  Returns -------     DICOM file response
         * @summary Download Result
         * @param {number} recordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadResultApiV1WorkflowmanagerDownloadRecordIdGet(recordId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadResultApiV1WorkflowmanagerDownloadRecordIdGet(recordId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowManagerApi.downloadResultApiV1WorkflowmanagerDownloadRecordIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Receives status for a job. Forwards it to the ui and returns ok.
         * @summary Forward Status
         * @param {ScanStatus} scanStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async forwardStatusApiV1WorkflowmanagerForwardStatusPost(scanStatus: ScanStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.forwardStatusApiV1WorkflowmanagerForwardStatusPost(scanStatus, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowManagerApi.forwardStatusApiV1WorkflowmanagerForwardStatusPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Read image file data and content as streaming response.  Parameters ---------- record_id     Record ID the image should be read for  Returns -------     Image file content  Raises ------ HTTPException     File not found
         * @summary Get Image File
         * @param {number} recordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageFileApiV1WorkflowmanagerImageRecordIdGet(recordId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageFileApiV1WorkflowmanagerImageRecordIdGet(recordId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowManagerApi.getImageFileApiV1WorkflowmanagerImageRecordIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Process a workflow.  Parameters ---------- workflow_id     UUID of the workflow to process  Returns -------     Workflow process response
         * @summary Process
         * @param {WorkflowId} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processApiV1WorkflowmanagerProcessWorkflowIdGet(workflowId: WorkflowId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processApiV1WorkflowmanagerProcessWorkflowIdGet(workflowId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowManagerApi.processApiV1WorkflowmanagerProcessWorkflowIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Process a task.  Parameters ---------- task_id     UUID of the task to process  Returns -------     Task process response
         * @summary Process Task
         * @param {TaskId} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processTaskApiV1WorkflowmanagerTaskProcessTaskIdGet(taskId: TaskId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processTaskApiV1WorkflowmanagerTaskProcessTaskIdGet(taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowManagerApi.processTaskApiV1WorkflowmanagerTaskProcessTaskIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Receives a job. Create a record id, trigger scan with it and returns it.
         * @summary Start Scan
         * @param {string} taskId 
         * @param {ScanJob} scanJob 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startScanApiV1WorkflowmanagerStartScanPost(taskId: string, scanJob: ScanJob, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startScanApiV1WorkflowmanagerStartScanPost(taskId, scanJob, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowManagerApi.startScanApiV1WorkflowmanagerStartScanPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload workflow result.  Parameters ---------- workflow_id     Id of the workflow, which is processed by workflow file, optional     Data upload, e.g. reconstruction result, by default File(...)  Returns -------     Notification
         * @summary Upload Result
         * @param {string} workflowId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost(workflowId: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost(workflowId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowManagerApi.uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkflowManagerApi - factory interface
 * @export
 */
export const WorkflowManagerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkflowManagerApiFp(configuration)
    return {
        /**
         * Download DICOM result.  Parameters ---------- record_id     ID of the record the DICOM file belongs to.  Returns -------     DICOM file response
         * @summary Download Result
         * @param {number} recordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadResultApiV1WorkflowmanagerDownloadRecordIdGet(recordId: number, options?: any): AxiosPromise<any> {
            return localVarFp.downloadResultApiV1WorkflowmanagerDownloadRecordIdGet(recordId, options).then((request) => request(axios, basePath));
        },
        /**
         * Receives status for a job. Forwards it to the ui and returns ok.
         * @summary Forward Status
         * @param {ScanStatus} scanStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        forwardStatusApiV1WorkflowmanagerForwardStatusPost(scanStatus: ScanStatus, options?: any): AxiosPromise<any> {
            return localVarFp.forwardStatusApiV1WorkflowmanagerForwardStatusPost(scanStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * Read image file data and content as streaming response.  Parameters ---------- record_id     Record ID the image should be read for  Returns -------     Image file content  Raises ------ HTTPException     File not found
         * @summary Get Image File
         * @param {number} recordId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageFileApiV1WorkflowmanagerImageRecordIdGet(recordId: number, options?: any): AxiosPromise<any> {
            return localVarFp.getImageFileApiV1WorkflowmanagerImageRecordIdGet(recordId, options).then((request) => request(axios, basePath));
        },
        /**
         * Process a workflow.  Parameters ---------- workflow_id     UUID of the workflow to process  Returns -------     Workflow process response
         * @summary Process
         * @param {WorkflowId} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processApiV1WorkflowmanagerProcessWorkflowIdGet(workflowId: WorkflowId, options?: any): AxiosPromise<any> {
            return localVarFp.processApiV1WorkflowmanagerProcessWorkflowIdGet(workflowId, options).then((request) => request(axios, basePath));
        },
        /**
         * Process a task.  Parameters ---------- task_id     UUID of the task to process  Returns -------     Task process response
         * @summary Process Task
         * @param {TaskId} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processTaskApiV1WorkflowmanagerTaskProcessTaskIdGet(taskId: TaskId, options?: any): AxiosPromise<any> {
            return localVarFp.processTaskApiV1WorkflowmanagerTaskProcessTaskIdGet(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Receives a job. Create a record id, trigger scan with it and returns it.
         * @summary Start Scan
         * @param {string} taskId 
         * @param {ScanJob} scanJob 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startScanApiV1WorkflowmanagerStartScanPost(taskId: string, scanJob: ScanJob, options?: any): AxiosPromise<any> {
            return localVarFp.startScanApiV1WorkflowmanagerStartScanPost(taskId, scanJob, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload workflow result.  Parameters ---------- workflow_id     Id of the workflow, which is processed by workflow file, optional     Data upload, e.g. reconstruction result, by default File(...)  Returns -------     Notification
         * @summary Upload Result
         * @param {string} workflowId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost(workflowId: string, file: File, options?: any): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost(workflowId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkflowManagerApi - object-oriented interface
 * @export
 * @class WorkflowManagerApi
 * @extends {BaseAPI}
 */
export class WorkflowManagerApi extends BaseAPI {
    /**
     * Download DICOM result.  Parameters ---------- record_id     ID of the record the DICOM file belongs to.  Returns -------     DICOM file response
     * @summary Download Result
     * @param {number} recordId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowManagerApi
     */
    public downloadResultApiV1WorkflowmanagerDownloadRecordIdGet(recordId: number, options?: RawAxiosRequestConfig) {
        return WorkflowManagerApiFp(this.configuration).downloadResultApiV1WorkflowmanagerDownloadRecordIdGet(recordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Receives status for a job. Forwards it to the ui and returns ok.
     * @summary Forward Status
     * @param {ScanStatus} scanStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowManagerApi
     */
    public forwardStatusApiV1WorkflowmanagerForwardStatusPost(scanStatus: ScanStatus, options?: RawAxiosRequestConfig) {
        return WorkflowManagerApiFp(this.configuration).forwardStatusApiV1WorkflowmanagerForwardStatusPost(scanStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Read image file data and content as streaming response.  Parameters ---------- record_id     Record ID the image should be read for  Returns -------     Image file content  Raises ------ HTTPException     File not found
     * @summary Get Image File
     * @param {number} recordId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowManagerApi
     */
    public getImageFileApiV1WorkflowmanagerImageRecordIdGet(recordId: number, options?: RawAxiosRequestConfig) {
        return WorkflowManagerApiFp(this.configuration).getImageFileApiV1WorkflowmanagerImageRecordIdGet(recordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Process a workflow.  Parameters ---------- workflow_id     UUID of the workflow to process  Returns -------     Workflow process response
     * @summary Process
     * @param {WorkflowId} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowManagerApi
     */
    public processApiV1WorkflowmanagerProcessWorkflowIdGet(workflowId: WorkflowId, options?: RawAxiosRequestConfig) {
        return WorkflowManagerApiFp(this.configuration).processApiV1WorkflowmanagerProcessWorkflowIdGet(workflowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Process a task.  Parameters ---------- task_id     UUID of the task to process  Returns -------     Task process response
     * @summary Process Task
     * @param {TaskId} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowManagerApi
     */
    public processTaskApiV1WorkflowmanagerTaskProcessTaskIdGet(taskId: TaskId, options?: RawAxiosRequestConfig) {
        return WorkflowManagerApiFp(this.configuration).processTaskApiV1WorkflowmanagerTaskProcessTaskIdGet(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Receives a job. Create a record id, trigger scan with it and returns it.
     * @summary Start Scan
     * @param {string} taskId 
     * @param {ScanJob} scanJob 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowManagerApi
     */
    public startScanApiV1WorkflowmanagerStartScanPost(taskId: string, scanJob: ScanJob, options?: RawAxiosRequestConfig) {
        return WorkflowManagerApiFp(this.configuration).startScanApiV1WorkflowmanagerStartScanPost(taskId, scanJob, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload workflow result.  Parameters ---------- workflow_id     Id of the workflow, which is processed by workflow file, optional     Data upload, e.g. reconstruction result, by default File(...)  Returns -------     Notification
     * @summary Upload Result
     * @param {string} workflowId 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowManagerApi
     */
    public uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost(workflowId: string, file: File, options?: RawAxiosRequestConfig) {
        return WorkflowManagerApiFp(this.configuration).uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost(workflowId, file, options).then((request) => request(this.axios, this.basePath));
    }
}



