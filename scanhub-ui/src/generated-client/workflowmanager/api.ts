/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface WorkflowId
 */
export interface WorkflowId {
}

/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Readiness health endpoint.  Inspects sqlalchemy engine and check if workflow table exists.  Returns -------     Status docstring  Raises ------ HTTPException     500: Workflow table does not exist
         * @summary Readiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readinessApiV1WorkflowmanagerHealthReadinessGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/workflowmanager/health/readiness`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * Readiness health endpoint.  Inspects sqlalchemy engine and check if workflow table exists.  Returns -------     Status docstring  Raises ------ HTTPException     500: Workflow table does not exist
         * @summary Readiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readinessApiV1WorkflowmanagerHealthReadinessGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readinessApiV1WorkflowmanagerHealthReadinessGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.readinessApiV1WorkflowmanagerHealthReadinessGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * Readiness health endpoint.  Inspects sqlalchemy engine and check if workflow table exists.  Returns -------     Status docstring  Raises ------ HTTPException     500: Workflow table does not exist
         * @summary Readiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readinessApiV1WorkflowmanagerHealthReadinessGet(options?: any): AxiosPromise<any> {
            return localVarFp.readinessApiV1WorkflowmanagerHealthReadinessGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * Readiness health endpoint.  Inspects sqlalchemy engine and check if workflow table exists.  Returns -------     Status docstring  Raises ------ HTTPException     500: Workflow table does not exist
     * @summary Readiness
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public readinessApiV1WorkflowmanagerHealthReadinessGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).readinessApiV1WorkflowmanagerHealthReadinessGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WorkflowManagerApi - axios parameter creator
 * @export
 */
export const WorkflowManagerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Hello world endpoint.
         * @summary Hello World
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helloWorldApiV1WorkflowmanagerHelloGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/workflowmanager/hello/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to list the available tasks from the orchestration engine.  Currently, only Airflow is supported.  Returns -------     dict: A dictionary containing the list of available tasks (DAGs) for Airflow.
         * @summary List Available Tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableTasksApiV1WorkflowmanagerTasksGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/workflowmanager/tasks/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Process a workflow.  Parameters ---------- workflow_id     UUID of the workflow to process  Returns -------     Workflow process response
         * @summary Process
         * @param {WorkflowId} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processApiV1WorkflowmanagerProcessWorkflowIdPost: async (workflowId: WorkflowId, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('processApiV1WorkflowmanagerProcessWorkflowIdPost', 'workflowId', workflowId)
            const localVarPath = `/api/v1/workflowmanager/process/{workflow_id}/`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint to trigger a task in the orchestration engine.  Args:     task_id (str): The ID of the DAG to be triggered.  Returns -------     dict: A dictionary containing the response from the orchestration engine.
         * @summary Trigger Task
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerTaskApiV1WorkflowmanagerTriggerTaskTaskIdPost: async (taskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('triggerTaskApiV1WorkflowmanagerTriggerTaskTaskIdPost', 'taskId', taskId)
            const localVarPath = `/api/v1/workflowmanager/trigger_task/{task_id}/`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload workflow result.  Parameters ---------- workflow_id     Id of the workflow, which is processed by workflow file, optional     Data upload, e.g. reconstruction result, by default File(...)  Returns -------     Notification
         * @summary Upload Result
         * @param {string} workflowId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost: async (workflowId: string, file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowId' is not null or undefined
            assertParamExists('uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost', 'workflowId', workflowId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost', 'file', file)
            const localVarPath = `/api/v1/workflowmanager/upload/{workflow_id}/`
                .replace(`{${"workflow_id"}}`, encodeURIComponent(String(workflowId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowManagerApi - functional programming interface
 * @export
 */
export const WorkflowManagerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkflowManagerApiAxiosParamCreator(configuration)
    return {
        /**
         * Hello world endpoint.
         * @summary Hello World
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async helloWorldApiV1WorkflowmanagerHelloGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.helloWorldApiV1WorkflowmanagerHelloGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowManagerApi.helloWorldApiV1WorkflowmanagerHelloGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Endpoint to list the available tasks from the orchestration engine.  Currently, only Airflow is supported.  Returns -------     dict: A dictionary containing the list of available tasks (DAGs) for Airflow.
         * @summary List Available Tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAvailableTasksApiV1WorkflowmanagerTasksGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAvailableTasksApiV1WorkflowmanagerTasksGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowManagerApi.listAvailableTasksApiV1WorkflowmanagerTasksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Process a workflow.  Parameters ---------- workflow_id     UUID of the workflow to process  Returns -------     Workflow process response
         * @summary Process
         * @param {WorkflowId} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processApiV1WorkflowmanagerProcessWorkflowIdPost(workflowId: WorkflowId, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processApiV1WorkflowmanagerProcessWorkflowIdPost(workflowId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowManagerApi.processApiV1WorkflowmanagerProcessWorkflowIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Endpoint to trigger a task in the orchestration engine.  Args:     task_id (str): The ID of the DAG to be triggered.  Returns -------     dict: A dictionary containing the response from the orchestration engine.
         * @summary Trigger Task
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerTaskApiV1WorkflowmanagerTriggerTaskTaskIdPost(taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerTaskApiV1WorkflowmanagerTriggerTaskTaskIdPost(taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowManagerApi.triggerTaskApiV1WorkflowmanagerTriggerTaskTaskIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Upload workflow result.  Parameters ---------- workflow_id     Id of the workflow, which is processed by workflow file, optional     Data upload, e.g. reconstruction result, by default File(...)  Returns -------     Notification
         * @summary Upload Result
         * @param {string} workflowId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost(workflowId: string, file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost(workflowId, file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WorkflowManagerApi.uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WorkflowManagerApi - factory interface
 * @export
 */
export const WorkflowManagerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkflowManagerApiFp(configuration)
    return {
        /**
         * Hello world endpoint.
         * @summary Hello World
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helloWorldApiV1WorkflowmanagerHelloGet(options?: any): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.helloWorldApiV1WorkflowmanagerHelloGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to list the available tasks from the orchestration engine.  Currently, only Airflow is supported.  Returns -------     dict: A dictionary containing the list of available tasks (DAGs) for Airflow.
         * @summary List Available Tasks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableTasksApiV1WorkflowmanagerTasksGet(options?: any): AxiosPromise<any> {
            return localVarFp.listAvailableTasksApiV1WorkflowmanagerTasksGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Process a workflow.  Parameters ---------- workflow_id     UUID of the workflow to process  Returns -------     Workflow process response
         * @summary Process
         * @param {WorkflowId} workflowId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processApiV1WorkflowmanagerProcessWorkflowIdPost(workflowId: WorkflowId, options?: any): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.processApiV1WorkflowmanagerProcessWorkflowIdPost(workflowId, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint to trigger a task in the orchestration engine.  Args:     task_id (str): The ID of the DAG to be triggered.  Returns -------     dict: A dictionary containing the response from the orchestration engine.
         * @summary Trigger Task
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerTaskApiV1WorkflowmanagerTriggerTaskTaskIdPost(taskId: string, options?: any): AxiosPromise<object> {
            return localVarFp.triggerTaskApiV1WorkflowmanagerTriggerTaskTaskIdPost(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * Upload workflow result.  Parameters ---------- workflow_id     Id of the workflow, which is processed by workflow file, optional     Data upload, e.g. reconstruction result, by default File(...)  Returns -------     Notification
         * @summary Upload Result
         * @param {string} workflowId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost(workflowId: string, file: File, options?: any): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost(workflowId, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkflowManagerApi - object-oriented interface
 * @export
 * @class WorkflowManagerApi
 * @extends {BaseAPI}
 */
export class WorkflowManagerApi extends BaseAPI {
    /**
     * Hello world endpoint.
     * @summary Hello World
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowManagerApi
     */
    public helloWorldApiV1WorkflowmanagerHelloGet(options?: RawAxiosRequestConfig) {
        return WorkflowManagerApiFp(this.configuration).helloWorldApiV1WorkflowmanagerHelloGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to list the available tasks from the orchestration engine.  Currently, only Airflow is supported.  Returns -------     dict: A dictionary containing the list of available tasks (DAGs) for Airflow.
     * @summary List Available Tasks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowManagerApi
     */
    public listAvailableTasksApiV1WorkflowmanagerTasksGet(options?: RawAxiosRequestConfig) {
        return WorkflowManagerApiFp(this.configuration).listAvailableTasksApiV1WorkflowmanagerTasksGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Process a workflow.  Parameters ---------- workflow_id     UUID of the workflow to process  Returns -------     Workflow process response
     * @summary Process
     * @param {WorkflowId} workflowId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowManagerApi
     */
    public processApiV1WorkflowmanagerProcessWorkflowIdPost(workflowId: WorkflowId, options?: RawAxiosRequestConfig) {
        return WorkflowManagerApiFp(this.configuration).processApiV1WorkflowmanagerProcessWorkflowIdPost(workflowId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint to trigger a task in the orchestration engine.  Args:     task_id (str): The ID of the DAG to be triggered.  Returns -------     dict: A dictionary containing the response from the orchestration engine.
     * @summary Trigger Task
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowManagerApi
     */
    public triggerTaskApiV1WorkflowmanagerTriggerTaskTaskIdPost(taskId: string, options?: RawAxiosRequestConfig) {
        return WorkflowManagerApiFp(this.configuration).triggerTaskApiV1WorkflowmanagerTriggerTaskTaskIdPost(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Upload workflow result.  Parameters ---------- workflow_id     Id of the workflow, which is processed by workflow file, optional     Data upload, e.g. reconstruction result, by default File(...)  Returns -------     Notification
     * @summary Upload Result
     * @param {string} workflowId 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowManagerApi
     */
    public uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost(workflowId: string, file: File, options?: RawAxiosRequestConfig) {
        return WorkflowManagerApiFp(this.configuration).uploadResultApiV1WorkflowmanagerUploadWorkflowIdPost(workflowId, file, options).then((request) => request(this.axios, this.basePath));
    }
}



