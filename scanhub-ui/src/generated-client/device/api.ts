/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Pydantic definition of AcquisitionLimits.
 * @export
 * @interface AcquisitionLimits
 */
export interface AcquisitionLimits {
    /**
     * 
     * @type {number}
     * @memberof AcquisitionLimits
     */
    'patient_height': number;
    /**
     * 
     * @type {number}
     * @memberof AcquisitionLimits
     */
    'patient_weight': number;
    /**
     * 
     * @type {Gender}
     * @memberof AcquisitionLimits
     */
    'patient_gender'?: Gender;
    /**
     * 
     * @type {number}
     * @memberof AcquisitionLimits
     */
    'patient_age': number;
}


/**
 * Pydantic definition of acquisition parameters.
 * @export
 * @interface AcquisitionParameter
 */
export interface AcquisitionParameter {
    /**
     * 
     * @type {XYZ}
     * @memberof AcquisitionParameter
     */
    'fov_scaling': XYZ;
    /**
     * 
     * @type {XYZ}
     * @memberof AcquisitionParameter
     */
    'fov_offset': XYZ;
    /**
     * 
     * @type {XYZ}
     * @memberof AcquisitionParameter
     */
    'fov_rotation': XYZ;
}
/**
 * Acquisition Task output model.
 * @export
 * @interface AcquisitionTaskOut
 */
export interface AcquisitionTaskOut {
    /**
     * 
     * @type {WorkflowId}
     * @memberof AcquisitionTaskOut
     */
    'workflow_id'?: WorkflowId;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionTaskOut
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionTaskOut
     */
    'description': string;
    /**
     * 
     * @type {TaskType}
     * @memberof AcquisitionTaskOut
     */
    'task_type': TaskType;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionTaskOut
     */
    'destination': string;
    /**
     * 
     * @type {ItemStatus}
     * @memberof AcquisitionTaskOut
     */
    'status': ItemStatus;
    /**
     * 
     * @type {number}
     * @memberof AcquisitionTaskOut
     */
    'progress': number;
    /**
     * 
     * @type {boolean}
     * @memberof AcquisitionTaskOut
     */
    'is_template': boolean;
    /**
     * 
     * @type {DeviceId}
     * @memberof AcquisitionTaskOut
     */
    'device_id'?: DeviceId;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionTaskOut
     */
    'sequence_id': string;
    /**
     * 
     * @type {AcquisitionParameter}
     * @memberof AcquisitionTaskOut
     */
    'acquisition_parameter': AcquisitionParameter;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionTaskOut
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionTaskOut
     */
    'creator': string;
    /**
     * 
     * @type {string}
     * @memberof AcquisitionTaskOut
     */
    'datetime_created': string;
    /**
     * 
     * @type {DatetimeUpdated}
     * @memberof AcquisitionTaskOut
     */
    'datetime_updated'?: DatetimeUpdated;
    /**
     * 
     * @type {Array<ResultOut>}
     * @memberof AcquisitionTaskOut
     */
    'results': Array<ResultOut>;
    /**
     * 
     * @type {AcquisitionTaskOutAcquisitionLimits}
     * @memberof AcquisitionTaskOut
     */
    'acquisition_limits'?: AcquisitionTaskOutAcquisitionLimits;
}


/**
 * 
 * @export
 * @interface AcquisitionTaskOutAcquisitionLimits
 */
export interface AcquisitionTaskOutAcquisitionLimits {
    /**
     * 
     * @type {any}
     * @memberof AcquisitionTaskOutAcquisitionLimits
     */
    'patient_height': any;
    /**
     * 
     * @type {any}
     * @memberof AcquisitionTaskOutAcquisitionLimits
     */
    'patient_weight': any;
    /**
     * 
     * @type {Gender}
     * @memberof AcquisitionTaskOutAcquisitionLimits
     */
    'patient_gender'?: Gender;
    /**
     * 
     * @type {any}
     * @memberof AcquisitionTaskOutAcquisitionLimits
     */
    'patient_age': any;
}


/**
 * 
 * @export
 * @interface DatetimeUpdated
 */
export interface DatetimeUpdated {
}
/**
 * Device registration request pydantic model (to be sent by user first adding the device to the platform).
 * @export
 * @interface DeviceCreationRequest
 */
export interface DeviceCreationRequest {
    /**
     * 
     * @type {string}
     * @memberof DeviceCreationRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceCreationRequest
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface DeviceId
 */
export interface DeviceId {
}
/**
 * 
 * @export
 * @interface DeviceName
 */
export interface DeviceName {
}
/**
 * Device pydantic output model.
 * @export
 * @interface DeviceOut
 */
export interface DeviceOut {
    /**
     * 
     * @type {DeviceName}
     * @memberof DeviceOut
     */
    'device_name'?: DeviceName;
    /**
     * 
     * @type {SerialNumber}
     * @memberof DeviceOut
     */
    'serial_number'?: SerialNumber;
    /**
     * 
     * @type {Manufacturer}
     * @memberof DeviceOut
     */
    'manufacturer'?: Manufacturer;
    /**
     * 
     * @type {Modality}
     * @memberof DeviceOut
     */
    'modality'?: Modality;
    /**
     * 
     * @type {Status}
     * @memberof DeviceOut
     */
    'status'?: Status;
    /**
     * 
     * @type {Site}
     * @memberof DeviceOut
     */
    'site'?: Site;
    /**
     * 
     * @type {string}
     * @memberof DeviceOut
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceOut
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceOut
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceOut
     */
    'datetime_created': string;
    /**
     * 
     * @type {DatetimeUpdated}
     * @memberof DeviceOut
     */
    'datetime_updated'?: DatetimeUpdated;
}
/**
 * Pydantic definition of genders.
 * @export
 * @enum {string}
 */

export const Gender = {
    Male: 'MALE',
    Female: 'FEMALE',
    Other: 'OTHER',
    NotGiven: 'NOT_GIVEN'
} as const;

export type Gender = typeof Gender[keyof typeof Gender];


/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * Task status enum.
 * @export
 * @enum {string}
 */

export const ItemStatus = {
    New: 'NEW',
    Updated: 'UPDATED',
    Started: 'STARTED',
    Finished: 'FINISHED',
    Deleted: 'DELETED',
    Inprogress: 'INPROGRESS'
} as const;

export type ItemStatus = typeof ItemStatus[keyof typeof ItemStatus];


/**
 * 
 * @export
 * @interface Manufacturer
 */
export interface Manufacturer {
}
/**
 * 
 * @export
 * @interface Modality
 */
export interface Modality {
}
/**
 * Result output model.
 * @export
 * @interface ResultOut
 */
export interface ResultOut {
    /**
     * 
     * @type {ResultType}
     * @memberof ResultOut
     */
    'type': ResultType;
    /**
     * 
     * @type {string}
     * @memberof ResultOut
     */
    'directory': string;
    /**
     * 
     * @type {string}
     * @memberof ResultOut
     */
    'filename': string;
    /**
     * 
     * @type {string}
     * @memberof ResultOut
     */
    'task_id': string;
    /**
     * 
     * @type {string}
     * @memberof ResultOut
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ResultOut
     */
    'datetime_created': string;
}


/**
 * Result type enum.
 * @export
 * @enum {string}
 */

export const ResultType = {
    Dicom: 'DICOM',
    Mrd: 'MRD',
    Numpy: 'NUMPY',
    Calibration: 'CALIBRATION',
    NotSet: 'NOT_SET'
} as const;

export type ResultType = typeof ResultType[keyof typeof ResultType];


/**
 * 
 * @export
 * @interface SerialNumber
 */
export interface SerialNumber {
}
/**
 * 
 * @export
 * @interface Site
 */
export interface Site {
}
/**
 * 
 * @export
 * @interface Status
 */
export interface Status {
}
/**
 * Task type enum.
 * @export
 * @enum {string}
 */

export const TaskType = {
    Acquisition: 'ACQUISITION',
    Dag: 'DAG',
    Reconstruction: 'RECONSTRUCTION',
    Processing: 'PROCESSING'
} as const;

export type TaskType = typeof TaskType[keyof typeof TaskType];


/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}
/**
 * 
 * @export
 * @interface WorkflowId
 */
export interface WorkflowId {
}
/**
 * Pydantic definition of coordinates.
 * @export
 * @interface XYZ
 */
export interface XYZ {
    /**
     * 
     * @type {number}
     * @memberof XYZ
     */
    'x': number;
    /**
     * 
     * @type {number}
     * @memberof XYZ
     */
    'y': number;
    /**
     * 
     * @type {number}
     * @memberof XYZ
     */
    'z': number;
}

/**
 * DevicesApi - axios parameter creator
 * @export
 */
export const DevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create device database entry.  Only devices which are created by a user via this endpoint and have the device_id and device_token that result from this call configured correctly can later connect and register.  Parameters ---------- request:     DeviceCreationRequest to create device in Scanhub.     Further details of the device are later provided by the device itself.  Return ------ device_token:     the token of the device which the user should copy manually to the configuration file of the device.  device_id:     the id of the device, should be copied to the devices config file together with the device_token.
         * @summary Create Device
         * @param {DeviceCreationRequest} deviceCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeviceApiV1DeviceCreatedevicePost: async (deviceCreationRequest: DeviceCreationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceCreationRequest' is not null or undefined
            assertParamExists('createDeviceApiV1DeviceCreatedevicePost', 'deviceCreationRequest', deviceCreationRequest)
            const localVarPath = `/api/v1/device/createdevice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceCreationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response indicating the success or failure of the deletion.
         * @summary Delete Device
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceApiV1DeviceDeviceIdDelete: async (deviceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('deleteDeviceApiV1DeviceDeviceIdDelete', 'deviceId', deviceId)
            const localVarPath = `/api/v1/device/{device_id}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response containing the information about the device
         * @summary Get Device
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceApiV1DeviceDeviceIdGet: async (deviceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getDeviceApiV1DeviceDeviceIdGet', 'deviceId', deviceId)
            const localVarPath = `/api/v1/device/{device_id}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the list of registered devices.  Returns -------     List[Device]: The list of registered devices.
         * @summary Get Devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevicesApiV1DeviceGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/device/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start a scan via a websocket that was already opened by the device.  Parameters ---------- device_task     Details of the scan and the device to scan on.
         * @summary Start Scan Via Websocket
         * @param {AcquisitionTaskOut} acquisitionTaskOut 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startScanViaWebsocketApiV1DeviceStartScanViaWebsocketPost: async (acquisitionTaskOut: AcquisitionTaskOut, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'acquisitionTaskOut' is not null or undefined
            assertParamExists('startScanViaWebsocketApiV1DeviceStartScanViaWebsocketPost', 'acquisitionTaskOut', acquisitionTaskOut)
            const localVarPath = `/api/v1/device/start_scan_via_websocket`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(acquisitionTaskOut, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevicesApi - functional programming interface
 * @export
 */
export const DevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create device database entry.  Only devices which are created by a user via this endpoint and have the device_id and device_token that result from this call configured correctly can later connect and register.  Parameters ---------- request:     DeviceCreationRequest to create device in Scanhub.     Further details of the device are later provided by the device itself.  Return ------ device_token:     the token of the device which the user should copy manually to the configuration file of the device.  device_id:     the id of the device, should be copied to the devices config file together with the device_token.
         * @summary Create Device
         * @param {DeviceCreationRequest} deviceCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDeviceApiV1DeviceCreatedevicePost(deviceCreationRequest: DeviceCreationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDeviceApiV1DeviceCreatedevicePost(deviceCreationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.createDeviceApiV1DeviceCreatedevicePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response indicating the success or failure of the deletion.
         * @summary Delete Device
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDeviceApiV1DeviceDeviceIdDelete(deviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDeviceApiV1DeviceDeviceIdDelete(deviceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deleteDeviceApiV1DeviceDeviceIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response containing the information about the device
         * @summary Get Device
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceApiV1DeviceDeviceIdGet(deviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeviceApiV1DeviceDeviceIdGet(deviceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.getDeviceApiV1DeviceDeviceIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the list of registered devices.  Returns -------     List[Device]: The list of registered devices.
         * @summary Get Devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevicesApiV1DeviceGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDevicesApiV1DeviceGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.getDevicesApiV1DeviceGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Start a scan via a websocket that was already opened by the device.  Parameters ---------- device_task     Details of the scan and the device to scan on.
         * @summary Start Scan Via Websocket
         * @param {AcquisitionTaskOut} acquisitionTaskOut 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startScanViaWebsocketApiV1DeviceStartScanViaWebsocketPost(acquisitionTaskOut: AcquisitionTaskOut, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startScanViaWebsocketApiV1DeviceStartScanViaWebsocketPost(acquisitionTaskOut, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.startScanViaWebsocketApiV1DeviceStartScanViaWebsocketPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DevicesApi - factory interface
 * @export
 */
export const DevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevicesApiFp(configuration)
    return {
        /**
         * Create device database entry.  Only devices which are created by a user via this endpoint and have the device_id and device_token that result from this call configured correctly can later connect and register.  Parameters ---------- request:     DeviceCreationRequest to create device in Scanhub.     Further details of the device are later provided by the device itself.  Return ------ device_token:     the token of the device which the user should copy manually to the configuration file of the device.  device_id:     the id of the device, should be copied to the devices config file together with the device_token.
         * @summary Create Device
         * @param {DeviceCreationRequest} deviceCreationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeviceApiV1DeviceCreatedevicePost(deviceCreationRequest: DeviceCreationRequest, options?: any): AxiosPromise<any> {
            return localVarFp.createDeviceApiV1DeviceCreatedevicePost(deviceCreationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response indicating the success or failure of the deletion.
         * @summary Delete Device
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceApiV1DeviceDeviceIdDelete(deviceId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDeviceApiV1DeviceDeviceIdDelete(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response containing the information about the device
         * @summary Get Device
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceApiV1DeviceDeviceIdGet(deviceId: string, options?: any): AxiosPromise<DeviceOut> {
            return localVarFp.getDeviceApiV1DeviceDeviceIdGet(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the list of registered devices.  Returns -------     List[Device]: The list of registered devices.
         * @summary Get Devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevicesApiV1DeviceGet(options?: any): AxiosPromise<Array<DeviceOut>> {
            return localVarFp.getDevicesApiV1DeviceGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Start a scan via a websocket that was already opened by the device.  Parameters ---------- device_task     Details of the scan and the device to scan on.
         * @summary Start Scan Via Websocket
         * @param {AcquisitionTaskOut} acquisitionTaskOut 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startScanViaWebsocketApiV1DeviceStartScanViaWebsocketPost(acquisitionTaskOut: AcquisitionTaskOut, options?: any): AxiosPromise<any> {
            return localVarFp.startScanViaWebsocketApiV1DeviceStartScanViaWebsocketPost(acquisitionTaskOut, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export class DevicesApi extends BaseAPI {
    /**
     * Create device database entry.  Only devices which are created by a user via this endpoint and have the device_id and device_token that result from this call configured correctly can later connect and register.  Parameters ---------- request:     DeviceCreationRequest to create device in Scanhub.     Further details of the device are later provided by the device itself.  Return ------ device_token:     the token of the device which the user should copy manually to the configuration file of the device.  device_id:     the id of the device, should be copied to the devices config file together with the device_token.
     * @summary Create Device
     * @param {DeviceCreationRequest} deviceCreationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public createDeviceApiV1DeviceCreatedevicePost(deviceCreationRequest: DeviceCreationRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).createDeviceApiV1DeviceCreatedevicePost(deviceCreationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response indicating the success or failure of the deletion.
     * @summary Delete Device
     * @param {string} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deleteDeviceApiV1DeviceDeviceIdDelete(deviceId: string, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deleteDeviceApiV1DeviceDeviceIdDelete(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response containing the information about the device
     * @summary Get Device
     * @param {string} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public getDeviceApiV1DeviceDeviceIdGet(deviceId: string, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).getDeviceApiV1DeviceDeviceIdGet(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the list of registered devices.  Returns -------     List[Device]: The list of registered devices.
     * @summary Get Devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public getDevicesApiV1DeviceGet(options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).getDevicesApiV1DeviceGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start a scan via a websocket that was already opened by the device.  Parameters ---------- device_task     Details of the scan and the device to scan on.
     * @summary Start Scan Via Websocket
     * @param {AcquisitionTaskOut} acquisitionTaskOut 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public startScanViaWebsocketApiV1DeviceStartScanViaWebsocketPost(acquisitionTaskOut: AcquisitionTaskOut, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).startScanViaWebsocketApiV1DeviceStartScanViaWebsocketPost(acquisitionTaskOut, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Readiness health endpoint.  Inspects sqlalchemy engine and check if workflow table exists.  Returns -------     Status docstring  Raises ------ HTTPException     500: Workflow table not found
         * @summary Readiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readinessApiV1DeviceHealthReadinessGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/device/health/readiness`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * Readiness health endpoint.  Inspects sqlalchemy engine and check if workflow table exists.  Returns -------     Status docstring  Raises ------ HTTPException     500: Workflow table not found
         * @summary Readiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readinessApiV1DeviceHealthReadinessGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readinessApiV1DeviceHealthReadinessGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.readinessApiV1DeviceHealthReadinessGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * Readiness health endpoint.  Inspects sqlalchemy engine and check if workflow table exists.  Returns -------     Status docstring  Raises ------ HTTPException     500: Workflow table not found
         * @summary Readiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readinessApiV1DeviceHealthReadinessGet(options?: any): AxiosPromise<any> {
            return localVarFp.readinessApiV1DeviceHealthReadinessGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * Readiness health endpoint.  Inspects sqlalchemy engine and check if workflow table exists.  Returns -------     Status docstring  Raises ------ HTTPException     500: Workflow table not found
     * @summary Readiness
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public readinessApiV1DeviceHealthReadinessGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).readinessApiV1DeviceHealthReadinessGet(options).then((request) => request(this.axios, this.basePath));
    }
}



