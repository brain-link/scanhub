/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Device pydantic output model.
 * @export
 * @interface DeviceOut
 */
export interface DeviceOut {
    /**
     * 
     * @type {string}
     * @memberof DeviceOut
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceOut
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceOut
     */
    'manufacturer': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceOut
     */
    'modality': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceOut
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceOut
     */
    'site'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceOut
     */
    'ip_address': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceOut
     */
    'datetime_created': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceOut
     */
    'datetime_updated'?: string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}

/**
 * DevicesApi - axios parameter creator
 * @export
 */
export const DevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response indicating the success or failure of the deletion.
         * @summary Delete Device
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceApiV1DeviceDeviceIdDelete: async (deviceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('deleteDeviceApiV1DeviceDeviceIdDelete', 'deviceId', deviceId)
            const localVarPath = `/api/v1/device/{device_id}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response containing the information about the device
         * @summary Get Device
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceApiV1DeviceDeviceIdGet: async (deviceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getDeviceApiV1DeviceDeviceIdGet', 'deviceId', deviceId)
            const localVarPath = `/api/v1/device/{device_id}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the IP address of a specific device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response containing the IP address of the device.
         * @summary Get Device Ip Address
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceIpAddressApiV1DeviceDeviceIdIpAddressGet: async (deviceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getDeviceIpAddressApiV1DeviceDeviceIdIpAddressGet', 'deviceId', deviceId)
            const localVarPath = `/api/v1/device/{device_id}/ip_address`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the status of a specific device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response containing the status of the device.
         * @summary Get Device Status
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceStatusApiV1DeviceDeviceIdStatusGet: async (deviceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getDeviceStatusApiV1DeviceDeviceIdStatusGet', 'deviceId', deviceId)
            const localVarPath = `/api/v1/device/{device_id}/status`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve the list of registered devices.  Returns -------     List[Device]: The list of registered devices.
         * @summary Get Devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevicesApiV1DeviceGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/device/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevicesApi - functional programming interface
 * @export
 */
export const DevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response indicating the success or failure of the deletion.
         * @summary Delete Device
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDeviceApiV1DeviceDeviceIdDelete(deviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDeviceApiV1DeviceDeviceIdDelete(deviceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.deleteDeviceApiV1DeviceDeviceIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve a specific device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response containing the information about the device
         * @summary Get Device
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceApiV1DeviceDeviceIdGet(deviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceOut>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeviceApiV1DeviceDeviceIdGet(deviceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.getDeviceApiV1DeviceDeviceIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the IP address of a specific device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response containing the IP address of the device.
         * @summary Get Device Ip Address
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceIpAddressApiV1DeviceDeviceIdIpAddressGet(deviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeviceIpAddressApiV1DeviceDeviceIdIpAddressGet(deviceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.getDeviceIpAddressApiV1DeviceDeviceIdIpAddressGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the status of a specific device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response containing the status of the device.
         * @summary Get Device Status
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceStatusApiV1DeviceDeviceIdStatusGet(deviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeviceStatusApiV1DeviceDeviceIdStatusGet(deviceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.getDeviceStatusApiV1DeviceDeviceIdStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Retrieve the list of registered devices.  Returns -------     List[Device]: The list of registered devices.
         * @summary Get Devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevicesApiV1DeviceGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceOut>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDevicesApiV1DeviceGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.getDevicesApiV1DeviceGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DevicesApi - factory interface
 * @export
 */
export const DevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevicesApiFp(configuration)
    return {
        /**
         * Delete a device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response indicating the success or failure of the deletion.
         * @summary Delete Device
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDeviceApiV1DeviceDeviceIdDelete(deviceId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDeviceApiV1DeviceDeviceIdDelete(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response containing the information about the device
         * @summary Get Device
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceApiV1DeviceDeviceIdGet(deviceId: string, options?: any): AxiosPromise<DeviceOut> {
            return localVarFp.getDeviceApiV1DeviceDeviceIdGet(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the IP address of a specific device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response containing the IP address of the device.
         * @summary Get Device Ip Address
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceIpAddressApiV1DeviceDeviceIdIpAddressGet(deviceId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getDeviceIpAddressApiV1DeviceDeviceIdIpAddressGet(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the status of a specific device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response containing the status of the device.
         * @summary Get Device Status
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceStatusApiV1DeviceDeviceIdStatusGet(deviceId: string, options?: any): AxiosPromise<any> {
            return localVarFp.getDeviceStatusApiV1DeviceDeviceIdStatusGet(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve the list of registered devices.  Returns -------     List[Device]: The list of registered devices.
         * @summary Get Devices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevicesApiV1DeviceGet(options?: any): AxiosPromise<Array<DeviceOut>> {
            return localVarFp.getDevicesApiV1DeviceGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export class DevicesApi extends BaseAPI {
    /**
     * Delete a device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response indicating the success or failure of the deletion.
     * @summary Delete Device
     * @param {string} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public deleteDeviceApiV1DeviceDeviceIdDelete(deviceId: string, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).deleteDeviceApiV1DeviceDeviceIdDelete(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response containing the information about the device
     * @summary Get Device
     * @param {string} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public getDeviceApiV1DeviceDeviceIdGet(deviceId: string, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).getDeviceApiV1DeviceDeviceIdGet(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the IP address of a specific device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response containing the IP address of the device.
     * @summary Get Device Ip Address
     * @param {string} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public getDeviceIpAddressApiV1DeviceDeviceIdIpAddressGet(deviceId: string, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).getDeviceIpAddressApiV1DeviceDeviceIdIpAddressGet(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the status of a specific device.  Args -------     device_id (str): The ID of the device.  Returns -------     dict: The response containing the status of the device.
     * @summary Get Device Status
     * @param {string} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public getDeviceStatusApiV1DeviceDeviceIdStatusGet(deviceId: string, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).getDeviceStatusApiV1DeviceDeviceIdStatusGet(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve the list of registered devices.  Returns -------     List[Device]: The list of registered devices.
     * @summary Get Devices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public getDevicesApiV1DeviceGet(options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).getDevicesApiV1DeviceGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Readiness health endpoint.  Inspects sqlalchemy engine and check if workflow table exists.  Returns -------     Status docstring  Raises ------ HTTPException     500: Workflow table not found
         * @summary Readiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readinessApiV1DeviceHealthReadinessGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/device/health/readiness`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * Readiness health endpoint.  Inspects sqlalchemy engine and check if workflow table exists.  Returns -------     Status docstring  Raises ------ HTTPException     500: Workflow table not found
         * @summary Readiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readinessApiV1DeviceHealthReadinessGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readinessApiV1DeviceHealthReadinessGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.readinessApiV1DeviceHealthReadinessGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * Readiness health endpoint.  Inspects sqlalchemy engine and check if workflow table exists.  Returns -------     Status docstring  Raises ------ HTTPException     500: Workflow table not found
         * @summary Readiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readinessApiV1DeviceHealthReadinessGet(options?: any): AxiosPromise<any> {
            return localVarFp.readinessApiV1DeviceHealthReadinessGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * Readiness health endpoint.  Inspects sqlalchemy engine and check if workflow table exists.  Returns -------     Status docstring  Raises ------ HTTPException     500: Workflow table not found
     * @summary Readiness
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public readinessApiV1DeviceHealthReadinessGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).readinessApiV1DeviceHealthReadinessGet(options).then((request) => request(this.axios, this.basePath));
    }
}



