/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AccessToken
 */
export interface AccessToken {
}
/**
 * 
 * @export
 * @interface ClientId
 */
export interface ClientId {
}
/**
 * 
 * @export
 * @interface ClientSecret
 */
export interface ClientSecret {
}
/**
 * 
 * @export
 * @interface Email
 */
export interface Email {
}
/**
 * 
 * @export
 * @interface GrantType
 */
export interface GrantType {
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LastActivityUnixtime
 */
export interface LastActivityUnixtime {
}
/**
 * 
 * @export
 * @interface LastLoginUnixtime
 */
export interface LastLoginUnixtime {
}
/**
 * 
 * @export
 * @interface PasswordUpdateRequest
 */
export interface PasswordUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PasswordUpdateRequest
     */
    'password_of_requester': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordUpdateRequest
     */
    'username_to_change_password_for': string;
    /**
     * 
     * @type {string}
     * @memberof PasswordUpdateRequest
     */
    'newpassword': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'last_name': string;
    /**
     * 
     * @type {Email}
     * @memberof User
     */
    'email'?: Email;
    /**
     * 
     * @type {UserRole}
     * @memberof User
     */
    'role': UserRole;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'token_type': string;
    /**
     * 
     * @type {LastActivityUnixtime}
     * @memberof User
     */
    'last_activity_unixtime'?: LastActivityUnixtime;
    /**
     * 
     * @type {LastLoginUnixtime}
     * @memberof User
     */
    'last_login_unixtime'?: LastLoginUnixtime;
}


/**
 * User role enum.
 * @export
 * @enum {string}
 */

export const UserRole = {
    Admin: 'admin',
    Medical: 'medical',
    Scientist: 'scientist',
    Engineer: 'engineer'
} as const;

export type UserRole = typeof UserRole[keyof typeof UserRole];


/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Readiness health endpoint.  Returns -------     Status dictionary  Raises ------ HTTPException     500: User table does not exist
         * @summary Readiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readinessApiV1UserloginHealthReadinessGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userlogin/health/readiness`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * Readiness health endpoint.  Returns -------     Status dictionary  Raises ------ HTTPException     500: User table does not exist
         * @summary Readiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readinessApiV1UserloginHealthReadinessGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readinessApiV1UserloginHealthReadinessGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['HealthApi.readinessApiV1UserloginHealthReadinessGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * Readiness health endpoint.  Returns -------     Status dictionary  Raises ------ HTTPException     500: User table does not exist
         * @summary Readiness
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readinessApiV1UserloginHealthReadinessGet(options?: any): AxiosPromise<any> {
            return localVarFp.readinessApiV1UserloginHealthReadinessGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * Readiness health endpoint.  Returns -------     Status dictionary  Raises ------ HTTPException     500: User table does not exist
     * @summary Readiness
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public readinessApiV1UserloginHealthReadinessGet(options?: RawAxiosRequestConfig) {
        return HealthApiFp(this.configuration).readinessApiV1UserloginHealthReadinessGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Login endpoint.  Parameters ---------- form_data     Http form data for OAuth2 compliant login with username and password.  Returns -------     User pydantic model, the user data in case of a successful login.  Raises ------ HTTPException     401: Unauthorized if the username or password is wrong.
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {GrantType} [grantType] 
         * @param {string} [scope] 
         * @param {ClientId} [clientId] 
         * @param {ClientSecret} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApiV1UserloginLoginPost: async (username: string, password: string, grantType?: GrantType, scope?: string, clientId?: ClientId, clientSecret?: ClientSecret, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginApiV1UserloginLoginPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginApiV1UserloginLoginPost', 'password', password)
            const localVarPath = `/api/v1/userlogin/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login endpoint for login with cookie.  Parameters ---------- access_token     User token as previously obtained trough a call to /login     Submit via HTTP cookie.  Returns -------     User pydantic model, the user data in case of a successful login.  Raises ------ HTTPException     401: Unauthorized if the username or password is wrong.
         * @summary Loginfromcookie
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginfromcookieApiV1UserloginLoginfromcookiePost: async (accessToken?: AccessToken, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userlogin/loginfromcookie`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Logout endpoint.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutApiV1UserloginLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userlogin/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * Login endpoint.  Parameters ---------- form_data     Http form data for OAuth2 compliant login with username and password.  Returns -------     User pydantic model, the user data in case of a successful login.  Raises ------ HTTPException     401: Unauthorized if the username or password is wrong.
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {GrantType} [grantType] 
         * @param {string} [scope] 
         * @param {ClientId} [clientId] 
         * @param {ClientSecret} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginApiV1UserloginLoginPost(username: string, password: string, grantType?: GrantType, scope?: string, clientId?: ClientId, clientSecret?: ClientSecret, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginApiV1UserloginLoginPost(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginApi.loginApiV1UserloginLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Login endpoint for login with cookie.  Parameters ---------- access_token     User token as previously obtained trough a call to /login     Submit via HTTP cookie.  Returns -------     User pydantic model, the user data in case of a successful login.  Raises ------ HTTPException     401: Unauthorized if the username or password is wrong.
         * @summary Loginfromcookie
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginfromcookieApiV1UserloginLoginfromcookiePost(accessToken?: AccessToken, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginfromcookieApiV1UserloginLoginfromcookiePost(accessToken, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginApi.loginfromcookieApiV1UserloginLoginfromcookiePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Logout endpoint.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutApiV1UserloginLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutApiV1UserloginLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LoginApi.logoutApiV1UserloginLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * Login endpoint.  Parameters ---------- form_data     Http form data for OAuth2 compliant login with username and password.  Returns -------     User pydantic model, the user data in case of a successful login.  Raises ------ HTTPException     401: Unauthorized if the username or password is wrong.
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {GrantType} [grantType] 
         * @param {string} [scope] 
         * @param {ClientId} [clientId] 
         * @param {ClientSecret} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginApiV1UserloginLoginPost(username: string, password: string, grantType?: GrantType, scope?: string, clientId?: ClientId, clientSecret?: ClientSecret, options?: any): AxiosPromise<User> {
            return localVarFp.loginApiV1UserloginLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * Login endpoint for login with cookie.  Parameters ---------- access_token     User token as previously obtained trough a call to /login     Submit via HTTP cookie.  Returns -------     User pydantic model, the user data in case of a successful login.  Raises ------ HTTPException     401: Unauthorized if the username or password is wrong.
         * @summary Loginfromcookie
         * @param {AccessToken} [accessToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginfromcookieApiV1UserloginLoginfromcookiePost(accessToken?: AccessToken, options?: any): AxiosPromise<User> {
            return localVarFp.loginfromcookieApiV1UserloginLoginfromcookiePost(accessToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Logout endpoint.
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutApiV1UserloginLogoutPost(options?: any): AxiosPromise<any> {
            return localVarFp.logoutApiV1UserloginLogoutPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * Login endpoint.  Parameters ---------- form_data     Http form data for OAuth2 compliant login with username and password.  Returns -------     User pydantic model, the user data in case of a successful login.  Raises ------ HTTPException     401: Unauthorized if the username or password is wrong.
     * @summary Login
     * @param {string} username 
     * @param {string} password 
     * @param {GrantType} [grantType] 
     * @param {string} [scope] 
     * @param {ClientId} [clientId] 
     * @param {ClientSecret} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public loginApiV1UserloginLoginPost(username: string, password: string, grantType?: GrantType, scope?: string, clientId?: ClientId, clientSecret?: ClientSecret, options?: RawAxiosRequestConfig) {
        return LoginApiFp(this.configuration).loginApiV1UserloginLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login endpoint for login with cookie.  Parameters ---------- access_token     User token as previously obtained trough a call to /login     Submit via HTTP cookie.  Returns -------     User pydantic model, the user data in case of a successful login.  Raises ------ HTTPException     401: Unauthorized if the username or password is wrong.
     * @summary Loginfromcookie
     * @param {AccessToken} [accessToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public loginfromcookieApiV1UserloginLoginfromcookiePost(accessToken?: AccessToken, options?: RawAxiosRequestConfig) {
        return LoginApiFp(this.configuration).loginfromcookieApiV1UserloginLoginfromcookiePost(accessToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Logout endpoint.
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public logoutApiV1UserloginLogoutPost(options?: RawAxiosRequestConfig) {
        return LoginApiFp(this.configuration).logoutApiV1UserloginLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change password of a user. Only administrators may change passwords of other users.  Parameters ---------- password_update_request     .password_of_requester: the password of the requester     .username_to_change_password_for: the username for whom to change the password     .newpassword: the new password  Returns -------     None  Raises ------ HTTPException     400: New Password must have at least 12 characters. Old Password must be correct.
         * @summary Change Password
         * @param {PasswordUpdateRequest} passwordUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordApiV1UserloginChangepasswordPut: async (passwordUpdateRequest: PasswordUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordUpdateRequest' is not null or undefined
            assertParamExists('changePasswordApiV1UserloginChangepasswordPut', 'passwordUpdateRequest', passwordUpdateRequest)
            const localVarPath = `/api/v1/userlogin/changepassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check if there are no users in the database.  Returns -------     True, if there are no users in the database.
         * @summary Check No Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkNoUsersApiV1UserloginChecknousersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userlogin/checknousers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create first user.  Parameters ---------- first_user     pydantic base model of the first user, token_type should be \"password\" and     access_token should contain the password of the new user.     The password of the new user should at least be 12 characters long.     The role should be admin.
         * @summary Create First User
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFirstUserApiV1UserloginCreatefirstuserPost: async (user: User, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('createFirstUserApiV1UserloginCreatefirstuserPost', 'user', user)
            const localVarPath = `/api/v1/userlogin/createfirstuser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create user database entry (only admins).  Parameters ---------- new_user     pydantic base model of new user, token_type should be \"password\" and     access_token should contain the password of the new user.     The password of the new user should at least be 12 characters long.
         * @summary Create User
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserApiV1UserloginCreateuserPost: async (user: User, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('createUserApiV1UserloginCreateuserPost', 'user', user)
            const localVarPath = `/api/v1/userlogin/createuser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get current user from access_token. May be called as an endpoint or used in FastAPI with Depends.  Parameters ---------- access_token     User token as previously obtained trough a call to /login     Submit via HTTP header \"Authorization: Bearer <access_token>\"  Returns -------     User pydantic model, the user data of the current user.  Raises ------ HTTPException     401: Unauthorized if the token is invalid or outdated.
         * @summary Get Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserApiV1UserloginGetcurrentuserGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userlogin/getcurrentuser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all users endpoint (only admins).  Returns -------     List of all users. The access_token and token_type properties are set to \"\" for all of them.
         * @summary Get User List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserListApiV1UserloginGetallusersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/userlogin/getallusers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the first_name, last_name, email and role of an existing user.  Parameters ---------- updated_user     The attribute username identifies the user to modify.     The attributes first_name, last_name, email and role are set for this user.  Returns -------     None  Raises ------ HTTPException     404: Not found if user not found.
         * @summary Update User
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserApiV1UserloginUpdateuserPut: async (user: User, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('updateUserApiV1UserloginUpdateuserPut', 'user', user)
            const localVarPath = `/api/v1/userlogin/updateuser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an existing user (requires admin priviledges).  Parameters ---------- username_to_delete     Name of the user to delete.  Raises ------ HTTPException     404: Not found
         * @summary User Delete
         * @param {string} usernameToDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDeleteApiV1UserloginDeleteuserDelete: async (usernameToDelete: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usernameToDelete' is not null or undefined
            assertParamExists('userDeleteApiV1UserloginDeleteuserDelete', 'usernameToDelete', usernameToDelete)
            const localVarPath = `/api/v1/userlogin/deleteuser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (usernameToDelete !== undefined) {
                localVarQueryParameter['username_to_delete'] = usernameToDelete;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Change password of a user. Only administrators may change passwords of other users.  Parameters ---------- password_update_request     .password_of_requester: the password of the requester     .username_to_change_password_for: the username for whom to change the password     .newpassword: the new password  Returns -------     None  Raises ------ HTTPException     400: New Password must have at least 12 characters. Old Password must be correct.
         * @summary Change Password
         * @param {PasswordUpdateRequest} passwordUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePasswordApiV1UserloginChangepasswordPut(passwordUpdateRequest: PasswordUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePasswordApiV1UserloginChangepasswordPut(passwordUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.changePasswordApiV1UserloginChangepasswordPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Check if there are no users in the database.  Returns -------     True, if there are no users in the database.
         * @summary Check No Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkNoUsersApiV1UserloginChecknousersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkNoUsersApiV1UserloginChecknousersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.checkNoUsersApiV1UserloginChecknousersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create first user.  Parameters ---------- first_user     pydantic base model of the first user, token_type should be \"password\" and     access_token should contain the password of the new user.     The password of the new user should at least be 12 characters long.     The role should be admin.
         * @summary Create First User
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFirstUserApiV1UserloginCreatefirstuserPost(user: User, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFirstUserApiV1UserloginCreatefirstuserPost(user, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.createFirstUserApiV1UserloginCreatefirstuserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create user database entry (only admins).  Parameters ---------- new_user     pydantic base model of new user, token_type should be \"password\" and     access_token should contain the password of the new user.     The password of the new user should at least be 12 characters long.
         * @summary Create User
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserApiV1UserloginCreateuserPost(user: User, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserApiV1UserloginCreateuserPost(user, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.createUserApiV1UserloginCreateuserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get current user from access_token. May be called as an endpoint or used in FastAPI with Depends.  Parameters ---------- access_token     User token as previously obtained trough a call to /login     Submit via HTTP header \"Authorization: Bearer <access_token>\"  Returns -------     User pydantic model, the user data of the current user.  Raises ------ HTTPException     401: Unauthorized if the token is invalid or outdated.
         * @summary Get Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentUserApiV1UserloginGetcurrentuserGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentUserApiV1UserloginGetcurrentuserGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getCurrentUserApiV1UserloginGetcurrentuserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get all users endpoint (only admins).  Returns -------     List of all users. The access_token and token_type properties are set to \"\" for all of them.
         * @summary Get User List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserListApiV1UserloginGetallusersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserListApiV1UserloginGetallusersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.getUserListApiV1UserloginGetallusersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the first_name, last_name, email and role of an existing user.  Parameters ---------- updated_user     The attribute username identifies the user to modify.     The attributes first_name, last_name, email and role are set for this user.  Returns -------     None  Raises ------ HTTPException     404: Not found if user not found.
         * @summary Update User
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserApiV1UserloginUpdateuserPut(user: User, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserApiV1UserloginUpdateuserPut(user, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.updateUserApiV1UserloginUpdateuserPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete an existing user (requires admin priviledges).  Parameters ---------- username_to_delete     Name of the user to delete.  Raises ------ HTTPException     404: Not found
         * @summary User Delete
         * @param {string} usernameToDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userDeleteApiV1UserloginDeleteuserDelete(usernameToDelete: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userDeleteApiV1UserloginDeleteuserDelete(usernameToDelete, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.userDeleteApiV1UserloginDeleteuserDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Change password of a user. Only administrators may change passwords of other users.  Parameters ---------- password_update_request     .password_of_requester: the password of the requester     .username_to_change_password_for: the username for whom to change the password     .newpassword: the new password  Returns -------     None  Raises ------ HTTPException     400: New Password must have at least 12 characters. Old Password must be correct.
         * @summary Change Password
         * @param {PasswordUpdateRequest} passwordUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePasswordApiV1UserloginChangepasswordPut(passwordUpdateRequest: PasswordUpdateRequest, options?: any): AxiosPromise<any> {
            return localVarFp.changePasswordApiV1UserloginChangepasswordPut(passwordUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Check if there are no users in the database.  Returns -------     True, if there are no users in the database.
         * @summary Check No Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkNoUsersApiV1UserloginChecknousersGet(options?: any): AxiosPromise<boolean> {
            return localVarFp.checkNoUsersApiV1UserloginChecknousersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Create first user.  Parameters ---------- first_user     pydantic base model of the first user, token_type should be \"password\" and     access_token should contain the password of the new user.     The password of the new user should at least be 12 characters long.     The role should be admin.
         * @summary Create First User
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFirstUserApiV1UserloginCreatefirstuserPost(user: User, options?: any): AxiosPromise<any> {
            return localVarFp.createFirstUserApiV1UserloginCreatefirstuserPost(user, options).then((request) => request(axios, basePath));
        },
        /**
         * Create user database entry (only admins).  Parameters ---------- new_user     pydantic base model of new user, token_type should be \"password\" and     access_token should contain the password of the new user.     The password of the new user should at least be 12 characters long.
         * @summary Create User
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserApiV1UserloginCreateuserPost(user: User, options?: any): AxiosPromise<any> {
            return localVarFp.createUserApiV1UserloginCreateuserPost(user, options).then((request) => request(axios, basePath));
        },
        /**
         * Get current user from access_token. May be called as an endpoint or used in FastAPI with Depends.  Parameters ---------- access_token     User token as previously obtained trough a call to /login     Submit via HTTP header \"Authorization: Bearer <access_token>\"  Returns -------     User pydantic model, the user data of the current user.  Raises ------ HTTPException     401: Unauthorized if the token is invalid or outdated.
         * @summary Get Current User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentUserApiV1UserloginGetcurrentuserGet(options?: any): AxiosPromise<User> {
            return localVarFp.getCurrentUserApiV1UserloginGetcurrentuserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Get all users endpoint (only admins).  Returns -------     List of all users. The access_token and token_type properties are set to \"\" for all of them.
         * @summary Get User List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserListApiV1UserloginGetallusersGet(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.getUserListApiV1UserloginGetallusersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Update the first_name, last_name, email and role of an existing user.  Parameters ---------- updated_user     The attribute username identifies the user to modify.     The attributes first_name, last_name, email and role are set for this user.  Returns -------     None  Raises ------ HTTPException     404: Not found if user not found.
         * @summary Update User
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserApiV1UserloginUpdateuserPut(user: User, options?: any): AxiosPromise<any> {
            return localVarFp.updateUserApiV1UserloginUpdateuserPut(user, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an existing user (requires admin priviledges).  Parameters ---------- username_to_delete     Name of the user to delete.  Raises ------ HTTPException     404: Not found
         * @summary User Delete
         * @param {string} usernameToDelete 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userDeleteApiV1UserloginDeleteuserDelete(usernameToDelete: string, options?: any): AxiosPromise<void> {
            return localVarFp.userDeleteApiV1UserloginDeleteuserDelete(usernameToDelete, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Change password of a user. Only administrators may change passwords of other users.  Parameters ---------- password_update_request     .password_of_requester: the password of the requester     .username_to_change_password_for: the username for whom to change the password     .newpassword: the new password  Returns -------     None  Raises ------ HTTPException     400: New Password must have at least 12 characters. Old Password must be correct.
     * @summary Change Password
     * @param {PasswordUpdateRequest} passwordUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public changePasswordApiV1UserloginChangepasswordPut(passwordUpdateRequest: PasswordUpdateRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).changePasswordApiV1UserloginChangepasswordPut(passwordUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check if there are no users in the database.  Returns -------     True, if there are no users in the database.
     * @summary Check No Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public checkNoUsersApiV1UserloginChecknousersGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).checkNoUsersApiV1UserloginChecknousersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create first user.  Parameters ---------- first_user     pydantic base model of the first user, token_type should be \"password\" and     access_token should contain the password of the new user.     The password of the new user should at least be 12 characters long.     The role should be admin.
     * @summary Create First User
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createFirstUserApiV1UserloginCreatefirstuserPost(user: User, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).createFirstUserApiV1UserloginCreatefirstuserPost(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create user database entry (only admins).  Parameters ---------- new_user     pydantic base model of new user, token_type should be \"password\" and     access_token should contain the password of the new user.     The password of the new user should at least be 12 characters long.
     * @summary Create User
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public createUserApiV1UserloginCreateuserPost(user: User, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).createUserApiV1UserloginCreateuserPost(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get current user from access_token. May be called as an endpoint or used in FastAPI with Depends.  Parameters ---------- access_token     User token as previously obtained trough a call to /login     Submit via HTTP header \"Authorization: Bearer <access_token>\"  Returns -------     User pydantic model, the user data of the current user.  Raises ------ HTTPException     401: Unauthorized if the token is invalid or outdated.
     * @summary Get Current User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getCurrentUserApiV1UserloginGetcurrentuserGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getCurrentUserApiV1UserloginGetcurrentuserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all users endpoint (only admins).  Returns -------     List of all users. The access_token and token_type properties are set to \"\" for all of them.
     * @summary Get User List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserListApiV1UserloginGetallusersGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).getUserListApiV1UserloginGetallusersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the first_name, last_name, email and role of an existing user.  Parameters ---------- updated_user     The attribute username identifies the user to modify.     The attributes first_name, last_name, email and role are set for this user.  Returns -------     None  Raises ------ HTTPException     404: Not found if user not found.
     * @summary Update User
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public updateUserApiV1UserloginUpdateuserPut(user: User, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).updateUserApiV1UserloginUpdateuserPut(user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an existing user (requires admin priviledges).  Parameters ---------- username_to_delete     Name of the user to delete.  Raises ------ HTTPException     404: Not found
     * @summary User Delete
     * @param {string} usernameToDelete 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userDeleteApiV1UserloginDeleteuserDelete(usernameToDelete: string, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).userDeleteApiV1UserloginDeleteuserDelete(usernameToDelete, options).then((request) => request(this.axios, this.basePath));
    }
}



