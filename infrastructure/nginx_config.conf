# Https configuration for production use
server {

  # listen 80;  # use for production, default HTTP port
  listen 8080;  # use for development to simplify port forwarding
  server_name localhost;

  # Redirect all HTTP traffic to HTTPS
  location / {
      # return 301 https://localhost;
      return 301 https://localhost:8443/;
  }

  # Exception for health check
  location /health {
    add_header Content-Type text/plain;
    return 200 'ok';
  }

}

server {
  # listen 443 ssl; # use for production, default HTTPS port
  listen 8443 ssl;  # use for development to simplify port forwarding
  server_name         localhost;

  ssl_certificate     /run/secrets/certificate;
  ssl_certificate_key /run/secrets/privatekey;
  ssl_protocols       TLSv1.2 TLSv1.3;
  ssl_ciphers         HIGH:!aNULL:!MD5;

  root /etc/nginx/html;

  client_max_body_size 100M;

  # Add this block for Airflow UI
  location /airflow {
    proxy_pass http://airflow-webserver:8080;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_redirect off;
  }


  # TEMPORARY SOLUTION TO DISPLAY SIEMENS IMAGE!
  location /dicom-proxy/ {
    proxy_pass https://marketing.webassets.siemens-healthineers.com/;

    proxy_ssl_server_name on;

    # Fix headers passed to remote server
    proxy_set_header Host marketing.webassets.siemens-healthineers.com;

    # CORS headers
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Methods "GET, OPTIONS";
    add_header Access-Control-Allow-Headers "Origin, Content-Type, Accept";

    # Preflight
    if ($request_method = OPTIONS) {
      add_header Content-Length 0;
      add_header Content-Type text/plain;
      return 204;
    }
  }



  location /health {
    add_header Content-Type text/plain;
    return 200 'ok';
  }

  location / {
    proxy_pass http://scanhub-ui:3000/; # Use this if the frontend is running in a Docker container
    # proxy_pass http://host.docker.internal:3000/; # Use this if the frontend is running on the host machine
  }

  location /api/v1/exam {
    proxy_pass http://exam-manager:8000/api/v1/exam;
  }

  location /api/v1/exam/login {
    proxy_pass http://user-login-manager:8000/api/v1/userlogin/login;
  }

  location /api/v1/userlogin {
    proxy_pass http://user-login-manager:8000/api/v1/userlogin;
  }

  location /api/v1/patient {
    proxy_pass http://patient-manager:8100/api/v1/patient;
  }

  location /api/v1/patient/login {
    proxy_pass http://user-login-manager:8000/api/v1/userlogin/login;
  }

  location /api/v1/workflowmanager {
    proxy_pass http://workflow-manager:8000/api/v1/workflowmanager;
  }

  location /api/v1/workflowmanager/login {
    proxy_pass http://user-login-manager:8000/api/v1/userlogin/login;
  }

  location /api/v1/device {
    proxy_pass http://device-manager:8000/api/v1/device;
  }

  location /api/v1/device/login {
    proxy_pass http://user-login-manager:8000/api/v1/userlogin/login;
  }

  location /api/v1/device/ws {
    proxy_pass http://device-manager:8000/api/v1/device/ws;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_set_header Host $host;
  }
}
