# =====================================================================
# This file is included by the main nginx.conf *inside* the `http { }`
# context. Do NOT add another `http { }` wrapper here.
# =====================================================================

# WebSocket connection helper (used for Vite HMR and other WS endpoints).
# Must be in http context (top-level of this file is already http).
map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      close;
}

# Optional: relaxed timeouts for big DICOM pulls and HMR (http context)
proxy_read_timeout 300s;
proxy_send_timeout 300s;
send_timeout 300s;

# Optional: enable gzip, but do NOT gzip WASM (http context)
gzip on;
gzip_types text/plain text/css application/json application/javascript application/xml;
# (do not add application/wasm)


# ======================
# Server: HTTP (8080)
# Redirects to HTTPS:8443
# ======================
server {

  # listen 80;  # use for production, default HTTP port
  listen 8080;  # use for development to simplify port forwarding
  server_name localhost;

  # Health endpoint (plain HTTP)
  location /health {
    add_header Content-Type text/plain;
    return 200 'ok';
  }

  # Redirect everything else to HTTPS:8443
  location / {
      # return 301 https://localhost;
      return 301 https://localhost:8443/;
  }

}


# =======================
# Server: HTTPS (8443)
# =======================
server {
  # listen 443 ssl; # use for production, default HTTPS port
  listen 8443 ssl;  # use for development to simplify port forwarding
  server_name         localhost;

  ssl_certificate     /run/secrets/certificate;
  ssl_certificate_key /run/secrets/privatekey;
  ssl_protocols       TLSv1.2 TLSv1.3;
  ssl_ciphers         HIGH:!aNULL:!MD5;

  root /etc/nginx/html;

  client_max_body_size 100M;

  location /health {
    add_header Content-Type text/plain;
    return 200 'ok';
  }

  # ---- Cross-origin isolation: set ONCE here (not in the proxy, not in Vite) ----
  add_header Cross-Origin-Opener-Policy "same-origin" always;
  add_header Cross-Origin-Embedder-Policy "require-corp" always;
  add_header Origin-Agent-Cluster "?1" always;
  # (Do NOT add Cross-Origin-Resource-Policy here in dev; Vite can send it for app HTML.)


  # --------------------------------------
  # Frontend UI (dev): proxy to Vite :3000
  # - Adds WS upgrade for HMR
  # - Sends COOP/COEP to client (response headers!)
  # --------------------------------------
  location / {
    # proxy_pass http://scanhub-ui:3000/; # Use this if the frontend is running in a Docker container
    proxy_pass http://host.docker.internal:3000/; # Use this if the frontend is running on the host machine

    proxy_http_version 1.1;

    # WebSocket/HMR
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    # Forward common headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # ---- IMPORTANT: hide Vite's copies to avoid duplicate COOP/COEP ----
    proxy_hide_header Cross-Origin-Opener-Policy;
    proxy_hide_header Cross-Origin-Embedder-Policy;
    # (Optional) if Vite sends CORP and you later add it in nginx, hide it too:
    # proxy_hide_header Cross-Origin-Resource-Policy;
  }

  # --------------------------------------
  # Dagster Dagit UI (already WS-ready)
  # --------------------------------------
  location /dagit/ {
      proxy_pass http://dagster-dagit:3000/dagit/;
      proxy_http_version 1.1;

      # WebSocket support
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";

      # Required headers for correct base URL behavior
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Forwarded-Prefix /dagit;

      # Optional: rewrite trailing slash
      rewrite ^/dagit$ /dagit/ permanent;
  }

  # --------------------------------------
  # DICOM bytes (WADO-URI etc.)
  # - Preserve range headers (scrubbing/streaming)
  # - Optional small Cache-Control if desired
  # --------------------------------------
  location /api/v1/exam {
    proxy_pass http://exam-manager:8000/api/v1/exam;

    proxy_http_version 1.1;

    # Forward common headers
    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # IMPORTANT: pass byte-range headers through (needed for multiframe streaming)
    proxy_set_header Range    $http_range;
    proxy_set_header If-Range $http_if_range;

    # Make scrubbing/streaming snappier and avoid buffering large partials
    proxy_buffering off;
    proxy_request_buffering off;

    # Do NOT add CORS headers here â€” FastAPI already sets them.
    # Nginx will forward FastAPI's Access-Control-* and Expose headers as-is.

  }

  location /api/v1/exam/login {
    proxy_pass http://user-login-manager:8000/api/v1/userlogin/login;
  }

  location /api/v1/userlogin {
    proxy_pass http://user-login-manager:8000/api/v1/userlogin;
  }

  location /api/v1/patient {
    proxy_pass http://patient-manager:8100/api/v1/patient;
  }

  location /api/v1/patient/login {
    proxy_pass http://user-login-manager:8000/api/v1/userlogin/login;
  }

  location /api/v1/workflowmanager/ {
    proxy_pass http://workflow-manager:8000/api/v1/workflowmanager/;
  }

  location /api/v1/workflowmanager/login {
    proxy_pass http://user-login-manager:8000/api/v1/userlogin/login;
  }

  location /api/v1/device {
    proxy_pass http://device-manager:8000/api/v1/device;
  }

  location /api/v1/device/login {
    proxy_pass http://user-login-manager:8000/api/v1/userlogin/login;
  }

  location /api/v1/device/ws {
    proxy_pass http://device-manager:8000/api/v1/device/ws;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_set_header Host $host;
  }
}
