exam-manager.app.db
===================

.. py:module:: exam-manager.app.db

.. autoapi-nested-parse::

   Database file for the MRI sequence manager service.



Attributes
----------

.. autoapisummary::

   exam-manager.app.db.engine
   exam-manager.app.db.MappedBase
   exam-manager.app.db.Device
   exam-manager.app.db.async_engine
   exam-manager.app.db.async_session


Classes
-------

.. autoapisummary::

   exam-manager.app.db.Base
   exam-manager.app.db.Exam
   exam-manager.app.db.Workflow
   exam-manager.app.db.Task


Functions
---------

.. autoapisummary::

   exam-manager.app.db.init_db


Module Contents
---------------

.. py:class:: Base

   Bases: :py:obj:`sqlalchemy.orm.DeclarativeBase`


   Declarative base class.


   .. py:method:: update(data: pydantic.BaseModel) -> None

      Update a exam entry.

      Parameters
      ----------
      data
          Data to be written



.. py:data:: engine

.. py:function:: init_db() -> None

   Initialize the database.


.. py:class:: Exam

   Bases: :py:obj:`Base`


   Abstract exam ORM model.


   .. py:attribute:: __tablename__
      :value: 'exam'



   .. py:attribute:: __table_args__


   .. py:attribute:: id
      :type:  sqlalchemy.orm.Mapped[uuid.UUID]


   .. py:attribute:: workflows
      :type:  sqlalchemy.orm.Mapped[list[Workflow]]


   .. py:attribute:: patient_id
      :type:  sqlalchemy.orm.Mapped[int]


   .. py:attribute:: name
      :type:  sqlalchemy.orm.Mapped[str]


   .. py:attribute:: country
      :type:  sqlalchemy.orm.Mapped[str]


   .. py:attribute:: site
      :type:  sqlalchemy.orm.Mapped[str]


   .. py:attribute:: address
      :type:  sqlalchemy.orm.Mapped[str]


   .. py:attribute:: creator
      :type:  sqlalchemy.orm.Mapped[str]


   .. py:attribute:: status
      :type:  sqlalchemy.orm.Mapped[str]


   .. py:attribute:: is_template
      :type:  sqlalchemy.orm.Mapped[bool]


   .. py:attribute:: is_frozen
      :type:  sqlalchemy.orm.Mapped[bool]


   .. py:attribute:: datetime_created
      :type:  sqlalchemy.orm.Mapped[datetime.datetime]


   .. py:attribute:: datetime_updated
      :type:  sqlalchemy.orm.Mapped[datetime.datetime]


.. py:class:: Workflow

   Bases: :py:obj:`Base`


   Workflow ORM model.


   .. py:attribute:: __tablename__
      :value: 'workflow'



   .. py:attribute:: __table_args__


   .. py:attribute:: id
      :type:  sqlalchemy.orm.Mapped[uuid.UUID]


   .. py:attribute:: tasks
      :type:  sqlalchemy.orm.Mapped[list[Task]]


   .. py:attribute:: exam_id
      :type:  sqlalchemy.orm.Mapped[uuid.UUID]


   .. py:attribute:: comment
      :type:  sqlalchemy.orm.Mapped[str]


   .. py:attribute:: is_finished
      :type:  sqlalchemy.orm.Mapped[bool]


   .. py:attribute:: is_template
      :type:  sqlalchemy.orm.Mapped[bool]


   .. py:attribute:: is_frozen
      :type:  sqlalchemy.orm.Mapped[bool]


   .. py:attribute:: datetime_created
      :type:  sqlalchemy.orm.Mapped[datetime.datetime]


   .. py:attribute:: datetime_updated
      :type:  sqlalchemy.orm.Mapped[datetime.datetime]


.. py:class:: Task

   Bases: :py:obj:`Base`


   Abstract task ORM model.


   .. py:attribute:: __tablename__
      :value: 'task'



   .. py:attribute:: __table_args__


   .. py:attribute:: id
      :type:  sqlalchemy.orm.Mapped[uuid.UUID]


   .. py:attribute:: workflow_id
      :type:  sqlalchemy.orm.Mapped[uuid.UUID]


   .. py:attribute:: description
      :type:  sqlalchemy.orm.Mapped[str]


   .. py:attribute:: type
      :type:  sqlalchemy.orm.Mapped[scanhub_libraries.models.TaskType]


   .. py:attribute:: args
      :type:  sqlalchemy.orm.Mapped[dict[str, str]]


   .. py:attribute:: artifacts
      :type:  sqlalchemy.orm.Mapped[dict[str, str]]


   .. py:attribute:: destinations
      :type:  sqlalchemy.orm.Mapped[dict[str, str]]


   .. py:attribute:: status
      :type:  sqlalchemy.orm.Mapped[dict[scanhub_libraries.models.TaskStatus, str]]


   .. py:attribute:: is_template
      :type:  sqlalchemy.orm.Mapped[bool]


   .. py:attribute:: is_frozen
      :type:  sqlalchemy.orm.Mapped[bool]


   .. py:attribute:: datetime_created
      :type:  sqlalchemy.orm.Mapped[datetime.datetime]


.. py:data:: MappedBase

.. py:data:: Device

.. py:data:: async_engine

.. py:data:: async_session

