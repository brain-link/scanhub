workflow-manager.app.api.workflow
=================================

.. py:module:: workflow-manager.app.api.workflow

.. autoapi-nested-parse::

   Workflow manager endpoints.



Attributes
----------

.. autoapisummary::

   workflow-manager.app.api.workflow.router
   workflow-manager.app.api.workflow.SEQUENCE_MANAGER_URI
   workflow-manager.app.api.workflow.EXAM_MANAGER_URI
   workflow-manager.app.api.workflow.producer
   workflow-manager.app.api.workflow.workflows
   workflow-manager.app.api.workflow.WORKFLOW_REQUESTS_TOPIC
   workflow-manager.app.api.workflow.TASK_ASSIGNMENTS_TOPIC
   workflow-manager.app.api.workflow.TASK_COMPLETIONS_TOPIC
   workflow-manager.app.api.workflow.WORKFLOW_RESPONSES_TOPIC
   workflow-manager.app.api.workflow.loop


Functions
---------

.. autoapisummary::

   workflow-manager.app.api.workflow.consume_workflow_requests
   workflow-manager.app.api.workflow.consume_task_completions
   workflow-manager.app.api.workflow.start_workflow
   workflow-manager.app.api.workflow.dispatch_next_task
   workflow-manager.app.api.workflow.handle_finished_task
   workflow-manager.app.api.workflow.send_workflow_status
   workflow-manager.app.api.workflow.handle_device_task
   workflow-manager.app.api.workflow.handle_processing_task
   workflow-manager.app.api.workflow.process
   workflow-manager.app.api.workflow.upload_result
   workflow-manager.app.api.workflow.download_result
   workflow-manager.app.api.workflow.get_data_from_file
   workflow-manager.app.api.workflow.get_image_file
   workflow-manager.app.api.workflow.device_location_request
   workflow-manager.app.api.workflow.retrieve_sequence
   workflow-manager.app.api.workflow.post_device_task
   workflow-manager.app.api.workflow.start_scan
   workflow-manager.app.api.workflow.forward_status


Module Contents
---------------

.. py:data:: router

.. py:data:: SEQUENCE_MANAGER_URI
   :value: 'host.docker.internal:8003'


.. py:data:: EXAM_MANAGER_URI
   :value: 'host.docker.internal:8004'


.. py:data:: producer

.. py:data:: workflows
   :type:  Dict[str, Dict[str, Any]]

.. py:data:: WORKFLOW_REQUESTS_TOPIC
   :value: 'workflow-requests'


.. py:data:: TASK_ASSIGNMENTS_TOPIC
   :value: 'task-assignments'


.. py:data:: TASK_COMPLETIONS_TOPIC
   :value: 'task-completions'


.. py:data:: WORKFLOW_RESPONSES_TOPIC
   :value: 'workflow-responses'


.. py:function:: consume_workflow_requests()
   :async:


.. py:function:: consume_task_completions()
   :async:


.. py:function:: start_workflow(workflow_id: str)
   :async:


   Fetch and initialize a workflow, then dispatch the first task.


.. py:function:: dispatch_next_task(workflow_id: str)
   :async:


   Find the next pending task and dispatch it.


.. py:function:: handle_finished_task(workflow_id: str, task_id: str, success: bool)
   :async:


   Update task status and dispatch next task if successful.


.. py:function:: send_workflow_status(workflow_id: str)
   :async:


   Produce a message with the current workflow status to workflow-responses.


.. py:function:: handle_device_task(workflow_id: str, task: dict)
   :async:


   Handle a device task by starting the scan.


.. py:function:: handle_processing_task(workflow_id: str, task: dict)
   :async:


   Handle a processing task by sending it to the specified topic.


.. py:function:: process(workflow_id: uuid.UUID | str) -> dict[str, str]
   :async:


   Process a workflow - start or continue workflow if needed.


.. py:function:: upload_result(workflow_id: str, file: fastapi.UploadFile = File(...)) -> dict[str, str]
   :async:


   Upload workflow result, then try to dispatch next tasks.


.. py:function:: download_result(record_id: int) -> fastapi.responses.FileResponse
   :async:


.. py:function:: get_data_from_file(file_path: str) -> Generator

.. py:function:: get_image_file(record_id: int) -> fastapi.responses.StreamingResponse
   :async:


.. py:function:: device_location_request(device_id)
   :async:


.. py:function:: retrieve_sequence(sequence_manager_uri, sequence_id)
   :async:


.. py:function:: post_device_task(url, device_task)
   :async:


.. py:function:: start_scan(scan_job: scanhub_libraries.models.ScanJob, task_id: str)
   :async:


.. py:function:: forward_status(scan_status: scanhub_libraries.models.ScanStatus)
   :async:


.. py:data:: loop

