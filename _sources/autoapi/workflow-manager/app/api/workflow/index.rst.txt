workflow-manager.app.api.workflow
=================================

.. py:module:: workflow-manager.app.api.workflow

.. autoapi-nested-parse::

   Workflow manager endpoints.



Attributes
----------

.. autoapisummary::

   workflow-manager.app.api.workflow.SEQUENCE_MANAGER_URI
   workflow-manager.app.api.workflow.EXAM_MANAGER_URI
   workflow-manager.app.api.workflow.PATIENT_MANAGER_URI
   workflow-manager.app.api.workflow.router
   workflow-manager.app.api.workflow.oauth2_scheme
   workflow-manager.app.api.workflow.producer


Functions
---------

.. autoapisummary::

   workflow-manager.app.api.workflow.calculate_age
   workflow-manager.app.api.workflow.process_task
   workflow-manager.app.api.workflow.process
   workflow-manager.app.api.workflow.upload_result
   workflow-manager.app.api.workflow.download_result
   workflow-manager.app.api.workflow.get_data_from_file
   workflow-manager.app.api.workflow.get_image_file
   workflow-manager.app.api.workflow.device_location_request
   workflow-manager.app.api.workflow.retrieve_sequence
   workflow-manager.app.api.workflow.create_record
   workflow-manager.app.api.workflow.post_device_task
   workflow-manager.app.api.workflow.start_scan_2
   workflow-manager.app.api.workflow.start_scan
   workflow-manager.app.api.workflow.forward_status


Module Contents
---------------

.. py:data:: SEQUENCE_MANAGER_URI
   :value: 'sequence-manager:8000'


.. py:data:: EXAM_MANAGER_URI
   :value: 'exam-manager:8000'


.. py:data:: PATIENT_MANAGER_URI
   :value: 'patient-manager:8100'


.. py:data:: router

.. py:data:: oauth2_scheme

.. py:data:: producer

.. py:function:: calculate_age(birth_date)

   Calculate age in years from birth date.

   Parameters
   ----------
   birth_date
       date of birth as datetime.date object

   Returns
   -------
       Age in years as integer


.. py:function:: process_task(task_id: uuid.UUID | str, access_token: Annotated[str, Depends(oauth2_scheme)])
   :async:


   Process a task.

   Parameters
   ----------
   task_id
       UUID of the task to process

   Returns
   -------
       Task process response


.. py:function:: process(workflow_id: uuid.UUID | str, access_token: Annotated[str, Depends(oauth2_scheme)])
   :async:


   Process a workflow.

   Parameters
   ----------
   workflow_id
       UUID of the workflow to process

   Returns
   -------
       Workflow process response


.. py:function:: upload_result(workflow_id: str, file: fastapi.UploadFile = File(...)) -> dict[str, str]
   :async:


   Upload workflow result.

   Parameters
   ----------
   workflow_id
       Id of the workflow, which is processed by workflow
   file, optional
       Data upload, e.g. reconstruction result, by default File(...)

   Returns
   -------
       Notification


.. py:function:: download_result(record_id: int) -> fastapi.responses.FileResponse
   :async:


   Download DICOM result.

   Parameters
   ----------
   record_id
       ID of the record the DICOM file belongs to.

   Returns
   -------
       DICOM file response


.. py:function:: get_data_from_file(file_path: str) -> Generator

   Open a file and read the data.

   Parameters
   ----------
   file_path
       Path of the file to open

   Yields
   ------
       File content


.. py:function:: get_image_file(record_id: int) -> fastapi.responses.StreamingResponse
   :async:


   Read image file data and content as streaming response.

   Parameters
   ----------
   record_id
       Record ID the image should be read for

   Returns
   -------
       Image file content

   Raises
   ------
   HTTPException
       File not found


.. py:function:: device_location_request(device_id, access_token)
   :async:


   Retrieve ip from device-manager.

   Parameters
   ----------
   device_id
       Id of device

   access_token
       the current access_token for using the API

   Returns
   -------
       ip_address of device


.. py:function:: retrieve_sequence(sequence_id, access_token)
   :async:


   Retrieve sequence and sequence-type from sequence-manager.

   Parameters
   ----------
   sequence_id
       id of sequence

   access_token
       the current access_token for using the API

   Returns
   -------
       sequence


.. py:function:: create_record(exam_manager_uri, job_id)
   :async:


   Create new record at exam_manager and retrieve record_id.

   Parameters
   ----------
   exam_manager_uri
       uri of sequence manager

   job_id
       id of job

   Returns
   -------
       id of newly created record


.. py:function:: post_device_task(url, device_task, headers=None)
   :async:


   Send task do device.

   Parameters
   ----------
   url
       url of the device

   device_task
       task

   Returns
   -------
       response of device


.. py:function:: start_scan_2(task_type: str, device_id: str, sequence_id: str, record_id: str, acquisition_limits: scanhub_libraries.models.AcquisitionLimits, sequence_parameters: scanhub_libraries.models.SequenceParameters, access_token: str)
   :async:


   Load the device and sequence data from the database and start the scan for task types DEVICE_TASK_SIMULATOR and DEVICE_TASK_SDK.


.. py:function:: start_scan(scan_job: scanhub_libraries.models.ScanJob, task_id: str, access_token: str)
   :async:


   Receives a job. Create a record id, trigger scan with it and returns it.


.. py:function:: forward_status(scan_status: scanhub_libraries.models.ScanStatus)
   :async:


   Receives status for a job. Forwards it to the ui and returns ok.


