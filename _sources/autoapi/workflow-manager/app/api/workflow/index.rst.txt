workflow-manager.app.api.workflow
=================================

.. py:module:: workflow-manager.app.api.workflow

.. autoapi-nested-parse::

   Workflow manager endpoints.

   TODO: How to handle tasks, and where to trigger the device task?
   - There should be one endpoint for task, workflow and exam
   - The endpoint processes the list, i.e. all the contained tasks
   - Does it help to store an index with each task?



Attributes
----------

.. autoapisummary::

   workflow-manager.app.api.workflow.router
   workflow-manager.app.api.workflow.oauth2_scheme
   workflow-manager.app.api.workflow.orchestration_engine
   workflow-manager.app.api.workflow.EXAM_MANAGER_URI
   workflow-manager.app.api.workflow.PATIENT_MANAGER_URI
   workflow-manager.app.api.workflow.DEVICE_MANAGER_URI
   workflow-manager.app.api.workflow.data_lake_directory


Functions
---------

.. autoapisummary::

   workflow-manager.app.api.workflow.trigger_task
   workflow-manager.app.api.workflow.calc_age_from_date
   workflow-manager.app.api.workflow.upload_and_trigger


Module Contents
---------------

.. py:data:: router

.. py:data:: oauth2_scheme

.. py:data:: orchestration_engine

.. py:data:: EXAM_MANAGER_URI
   :value: 'exam-manager:8000'


.. py:data:: PATIENT_MANAGER_URI
   :value: 'patient-manager:8100'


.. py:data:: DEVICE_MANAGER_URI
   :value: 'device-manager:8000'


.. py:data:: data_lake_directory

.. py:function:: trigger_task(task_id: str, access_token: Annotated[str, Depends(oauth2_scheme)]) -> dict[str, Any]
   :async:


   Endpoint to trigger a task in the orchestration engine.

   Args:
       task_id (str): The ID of the DAG to be triggered.

   Returns
   -------
       dict: A dictionary containing the response from the orchestration engine.


.. py:function:: calc_age_from_date(birth_date: datetime.date) -> int

   Calculate age in years from a given birth date.

   Parameters
   ----------
   birth_date
       Date of birth

   Returns
   -------
       Age in years as int


.. py:function:: upload_and_trigger(dag_id: str, access_token: Annotated[str, Depends(oauth2_scheme)], file: fastapi.UploadFile = File(...)) -> Dict[str, Any]
   :async:


   Upload a file and trigger an Airflow DAG.

   Parameters
   ----------
   dag_id
       The ID of the DAG to be triggered.
   file, optional
       Data upload, e.g. reconstruction result, by default File(...)

   Returns
   -------
       dict: A dictionary containing a message and data.


