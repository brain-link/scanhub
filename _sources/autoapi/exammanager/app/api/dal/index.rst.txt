:py:mod:`exam-manager.app.api.dal`
==================================

.. py:module:: exam-manager.app.api.dal

.. autoapi-nested-parse::

   Data access layer.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   exam-manager.app.api.dal.exam_add
   exam-manager.app.api.dal.exam_get
   exam-manager.app.api.dal.exam_get_all
   exam-manager.app.api.dal.exam_delete
   exam-manager.app.api.dal.update_exam
   exam-manager.app.api.dal.procedure_add
   exam-manager.app.api.dal.procedure_get
   exam-manager.app.api.dal.procedure_get_all
   exam-manager.app.api.dal.procedure_delete
   exam-manager.app.api.dal.procedure_update
   exam-manager.app.api.dal.add_job
   exam-manager.app.api.dal.get_job
   exam-manager.app.api.dal.get_all_jobs
   exam-manager.app.api.dal.delete_job
   exam-manager.app.api.dal.update_job
   exam-manager.app.api.dal.add_record
   exam-manager.app.api.dal.update_record
   exam-manager.app.api.dal.get_record
   exam-manager.app.api.dal.get_all_records
   exam-manager.app.api.dal.delete_record



.. py:function:: exam_add(payload: exam-manager.app.api.models.BaseExam) -> exam-manager.app.api.db.Exam
   :async:

   Create new exam.

   Parameters
   ----------
   payload
       Exam pydantic base model

   Returns
   -------
       Database orm model of created exam


.. py:function:: exam_get(exam_id: int) -> exam-manager.app.api.db.Exam | None
   :async:

   Get exam by id.

   Parameters
   ----------
   exam_id
       Id of requested exam

   Returns
   -------
       Database orm model of exam or none


.. py:function:: exam_get_all(patient_id: int) -> list[exam-manager.app.api.db.Exam]
   :async:

   Get a list of all exams assigned to a certain patient.

   Parameters
   ----------
   patient_id
       Id of the parent patient entry, exams are assigned to

   Returns
   -------
       List of exam data base orm models


.. py:function:: exam_delete(exam_id: int) -> bool
   :async:

   Delete exam by id.

   Parameters
   ----------
   exam_id
       Id of the exam to be deleted

   Returns
   -------
       Success of deletion


.. py:function:: update_exam(exam_id: int, payload: exam-manager.app.api.models.BaseExam) -> exam-manager.app.api.db.Exam | None
   :async:

   Update existing exam entry.

   Parameters
   ----------
   exam_id
       Id of the database entry to be updated

   payload
       Pydantic base exam model with data to be updated

   Returns
   -------
       Database orm model of updated exam


.. py:function:: procedure_add(payload: exam-manager.app.api.models.ProcedureIn) -> exam-manager.app.api.db.Procedure
   :async:

   Create new procedure.

   Parameters
   ----------
   payload
       Procedure pydantic input model with data for procedure creation

   Returns
   -------
       Data base orm model of created procedure


.. py:function:: procedure_get(procedure_id: int) -> exam-manager.app.api.db.Procedure | None
   :async:

   Get procedure by id.

   Parameters
   ----------
   procedure_id
       Id of the requested procedure

   Returns
   -------
       Data base orm model of requested procedure


.. py:function:: procedure_get_all(exam_id: int) -> list[exam-manager.app.api.db.Procedure]
   :async:

   Get a list of all procedures assigned to a certain exam.

   Parameters
   ----------
   exam_id
       Id of the parent exam entry, procedures are assigned to

   Returns
   -------
       List of procedures data base orm models


.. py:function:: procedure_delete(procedure_id: int) -> bool
   :async:

   Delete procedure by id.

   Parameters
   ----------
   procedure_id
       Id of the procedure to be deleted

   Returns
   -------
       Success of deletion


.. py:function:: procedure_update(procedure_id: int, payload: exam-manager.app.api.models.ProcedureIn) -> exam-manager.app.api.db.Procedure | None
   :async:

   Update existing procedure.

   Parameters
   ----------
   procedure_id
       Id of procedure to be updated

   payload
       Procedure pydantic base model with data to be updated

   Returns
   -------
       Database orm model of updated procedure


.. py:function:: add_job(payload: exam-manager.app.api.models.BaseJob) -> exam-manager.app.api.db.Job
   :async:

   Add new job.

   Parameters
   ----------
   payload
       Job pydantic base model with data for job creation

   Returns
   -------
       Database orm model of created job


.. py:function:: get_job(job_id: int) -> exam-manager.app.api.db.Job | None
   :async:

   Get job by id.

   Parameters
   ----------
   job_id
       Id of the requested job

   Returns
   -------
       Database orm model with data of requested job


.. py:function:: get_all_jobs(procedure_id: int) -> list[exam-manager.app.api.db.Job]
   :async:

   Get a list of all jobs assigned to a certain procedure.

   Parameters
   ----------
   procedure_id
       Id of the parent procedure entry, jobs are assigned to

   Returns
   -------
       List of job data base orm models


.. py:function:: delete_job(job_id: int) -> bool
   :async:

   Delete a job by ID.

   Parameters
   ----------
   job_id
       ID of job to be deleted

   Returns
   -------
       Success of delete event


.. py:function:: update_job(job_id: int, payload: exam-manager.app.api.models.BaseJob) -> exam-manager.app.api.db.Job | None
   :async:

   Update existing job in database.

   Parameters
   ----------
   job_id
       Id of the job to be updateed
   payload
       Job pydantic base model with data to be updated

   Returns
   -------
       Job database orm model of updated job


.. py:function:: add_record(payload: exam-manager.app.api.models.RecordIn) -> exam-manager.app.api.db.Record
   :async:

   Add new record to database.

   Parameters
   ----------
   payload
       Record pydantic input model

   Returns
   -------
       Database orm model of created record


.. py:function:: update_record(record_id: int, payload: dict) -> exam-manager.app.api.db.Record | None
   :async:

   Update existing record.

   Parameters
   ----------
   record_id
       Id of the record to be updated
   payload
       Dictionary with data to be updated

   Returns
   -------
       Database orm model of updated record


.. py:function:: get_record(record_id: int) -> exam-manager.app.api.db.Record | None
   :async:

   Get a record from database by id.

   Parameters
   ----------
   record_id
       Id of the requested record

   Returns
   -------
       Database orm model of requested record


.. py:function:: get_all_records(job_id: int) -> list[exam-manager.app.api.db.Record]
   :async:

   Get a list of all records assigned to a certain job.

   Parameters
   ----------
   job_id
       Id of the parent job entry, records are assigned to

   Returns
   -------
       List of record data base orm models


.. py:function:: delete_record(record_id: int) -> bool
   :async:

   Delete record by id.

   Parameters
   ----------
   record_id
       Id of the record to be deleted

   Returns
   -------
       Success of deletion


