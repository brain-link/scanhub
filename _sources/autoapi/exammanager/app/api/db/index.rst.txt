:py:mod:`exam-manager.app.api.db`
=================================

.. py:module:: exam-manager.app.api.db

.. autoapi-nested-parse::

   Database file for the MRI sequence manager service.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   exam-manager.app.api.db.Base
   exam-manager.app.api.db.Exam
   exam-manager.app.api.db.Job
   exam-manager.app.api.db.Record



Functions
~~~~~~~~~

.. autoapisummary::

   exam-manager.app.api.db.init_db



Attributes
~~~~~~~~~~

.. autoapisummary::

   exam-manager.app.api.db.engine
   exam-manager.app.api.db.MappedBase
   exam-manager.app.api.db.Device
   exam-manager.app.api.db.async_engine
   exam-manager.app.api.db.async_session


.. py:class:: Base


   Bases: :py:obj:`sqlalchemy.orm.DeclarativeBase`

   Declarative base class.

   .. py:method:: update(data: pydantic.BaseModel) -> None

      Update a exam entry.

      Parameters
      ----------
      data
          Data to be written



.. py:data:: engine

   

.. py:function:: init_db() -> None

   Initialize the database.


.. py:class:: Exam


   Bases: :py:obj:`Base`

   Exam ORM model.

   .. py:attribute:: __tablename__
      :value: 'exam'

      

   .. py:attribute:: __table_args__

      

   .. py:attribute:: id
      :type: sqlalchemy.orm.Mapped[uuid.UUID]

      

   .. py:attribute:: jobs
      :type: sqlalchemy.orm.Mapped[list[Job]]

      

   .. py:attribute:: patient_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: name
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: country
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: site
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: address
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: creator
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: status
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: datetime_created
      :type: sqlalchemy.orm.Mapped[datetime.datetime]

      

   .. py:attribute:: datetime_updated
      :type: sqlalchemy.orm.Mapped[datetime.datetime]

      


.. py:class:: Job


   Bases: :py:obj:`Base`

   Job ORM model.

   .. py:attribute:: __tablename__
      :value: 'job'

      

   .. py:attribute:: __table_args__

      

   .. py:attribute:: id
      :type: sqlalchemy.orm.Mapped[uuid.UUID]

      

   .. py:attribute:: exam_id
      :type: sqlalchemy.orm.Mapped[uuid.UUID]

      

   .. py:attribute:: workflow_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: device_id
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: sequence_id
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: records
      :type: sqlalchemy.orm.Mapped[list[Record]]

      

   .. py:attribute:: type
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: comment
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: is_acquired
      :type: sqlalchemy.orm.Mapped[bool]

      

   .. py:attribute:: datetime_created
      :type: sqlalchemy.orm.Mapped[datetime.datetime]

      

   .. py:attribute:: datetime_updated
      :type: sqlalchemy.orm.Mapped[datetime.datetime]

      

   .. py:attribute:: acquisition_limits
      :type: sqlalchemy.orm.Mapped[scanhub_libraries.models.AcquisitionLimits]

      

   .. py:attribute:: sequence_parameters
      :type: sqlalchemy.orm.Mapped[scanhub_libraries.models.SequenceParameters]

      


.. py:class:: Record


   Bases: :py:obj:`Base`

   Record ORM model.

   .. py:attribute:: __tablename__
      :value: 'record'

      

   .. py:attribute:: __table_args__

      

   .. py:attribute:: id
      :type: sqlalchemy.orm.Mapped[uuid.UUID]

      

   .. py:attribute:: job_id
      :type: sqlalchemy.orm.Mapped[uuid.UUID]

      

   .. py:attribute:: data_path
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: comment
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: datetime_created
      :type: sqlalchemy.orm.Mapped[datetime.datetime]

      


.. py:data:: MappedBase

   

.. py:data:: Device

   

.. py:data:: async_engine

   

.. py:data:: async_session

   

