:py:mod:`acquisition-control.app.api.acquisitioncontrol`
========================================================

.. py:module:: acquisition-control.app.api.acquisitioncontrol

.. autoapi-nested-parse::

   Acquisition control. Receives control cmd from ui and controls scans on devices.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   acquisition-control.app.api.acquisitioncontrol.device_location_request
   acquisition-control.app.api.acquisitioncontrol.retrieve_sequence
   acquisition-control.app.api.acquisitioncontrol.create_record
   acquisition-control.app.api.acquisitioncontrol.post_device_task
   acquisition-control.app.api.acquisitioncontrol.start_scan
   acquisition-control.app.api.acquisitioncontrol.forward_status



Attributes
~~~~~~~~~~

.. autoapisummary::

   acquisition-control.app.api.acquisitioncontrol.SEQUENCE_MANAGER_URI
   acquisition-control.app.api.acquisitioncontrol.EXAM_MANAGER_URI
   acquisition-control.app.api.acquisitioncontrol.router


.. py:data:: SEQUENCE_MANAGER_URI
   :value: 'host.docker.internal:8003'

   

.. py:data:: EXAM_MANAGER_URI
   :value: 'host.docker.internal:8004'

   

.. py:data:: router

   

.. py:function:: device_location_request(device_id)
   :async:

   Retrieve ip from device-manager.

   Parameters
   ----------
   device_id
       Id of device

   Returns
   -------
       ip_address of device


.. py:function:: retrieve_sequence(sequence_manager_uri, sequence_id)
   :async:

   Retrieve sequence and sequence-type from sequence-manager.

   Parameters
   ----------
   sequence_manager_uri
       uri of sequence manager

   sequence_id
       id of sequence

   Returns
   -------
       sequence


.. py:function:: create_record(exam_manager_uri, job_id)
   :async:

   Create new record at exam_manager and retrieve record_id.

   Parameters
   ----------
   exam_manager_uri
       uri of sequence manager

   job_id
       id of job

   Returns
   -------
       id of newly created record


.. py:function:: post_device_task(url, device_task)
   :async:

   Send task do device.

   Parameters
   ----------
   url
       url of the device

   device_task
       task

   Returns
   -------
       response of device


.. py:function:: start_scan(scan_job: scanhub_libraries.models.ScanJob)
   :async:

   Receives a job. Create a record id, trigger scan with it and returns it.


.. py:function:: forward_status(scan_status: scanhub_libraries.models.ScanStatus)
   :async:

   Receives status for a job. Forwards it to the ui and returns ok.


