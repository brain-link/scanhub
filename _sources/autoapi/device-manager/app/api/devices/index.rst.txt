device-manager.app.api.devices
==============================

.. py:module:: device-manager.app.api.devices

.. autoapi-nested-parse::

   Device API Endpoints.

   This module defines the API routes and WebSocket endpoints for managing devices.
   It includes functionalities for:
   - CRUD operations on devices.
   - Device registration and status updates via WebSocket.

   Copyright (C) 2023, BRAIN-LINK UG (haftungsbeschrÃ¤nkt). All Rights Reserved.
   SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-ScanHub-Commercial



Attributes
----------

.. autoapisummary::

   device-manager.app.api.devices.router
   device-manager.app.api.devices.EXAM_MANAGER_URI
   device-manager.app.api.devices.active_connections
   device-manager.app.api.devices.dict_id_websocket


Functions
---------

.. autoapisummary::

   device-manager.app.api.devices.get_devices
   device-manager.app.api.devices.get_device_ip_address
   device-manager.app.api.devices.get_device
   device-manager.app.api.devices.get_device_status
   device-manager.app.api.devices.delete_device
   device-manager.app.api.devices.start_scan_via_websocket
   device-manager.app.api.devices.websocket_endpoint
   device-manager.app.api.devices.websocket_endpoint_legacy


Module Contents
---------------

.. py:data:: router

.. py:data:: EXAM_MANAGER_URI
   :value: 'exam-manager:8000'


.. py:data:: active_connections
   :type:  list[fastapi.WebSocket]
   :value: []


.. py:data:: dict_id_websocket
   :type:  Dict[str, fastapi.WebSocket]

.. py:function:: get_devices() -> list[device-manager.app.api.models.DeviceOut]
   :async:


   Retrieve the list of registered devices.

   Returns
   -------
       List[Device]: The list of registered devices.


.. py:function:: get_device_ip_address(device_id: str)
   :async:


   Retrieve the IP address of a specific device.

   Args
   -------
       device_id (str): The ID of the device.

   Returns
   -------
       dict: The response containing the IP address of the device.


.. py:function:: get_device(device_id: str)
   :async:


   Retrieve a specific device.

   Args
   -------
       device_id (str): The ID of the device.

   Returns
   -------
       dict: The response containing the information about the device


.. py:function:: get_device_status(device_id: str)
   :async:


   Retrieve the status of a specific device.

   Args
   -------
       device_id (str): The ID of the device.

   Returns
   -------
       dict: The response containing the status of the device.


.. py:function:: delete_device(device_id: str)
   :async:


   Delete a device.

   Args
   -------
       device_id (str): The ID of the device.

   Returns
   -------
       dict: The response indicating the success or failure of the deletion.


.. py:function:: start_scan_via_websocket(device_task: scanhub_libraries.models.DeviceTask)
   :async:


   Start a scan via a websocket that was already opened by the device.

   Parameters
   ----------
   device_task
       Details of the scan and the device to scan on.



.. py:function:: websocket_endpoint(websocket: fastapi.WebSocket)
   :async:


   Websocket endpoint for device communication.

   Args
   ----
       websocket (WebSocket): The WebSocket connection object.


.. py:function:: websocket_endpoint_legacy(websocket: fastapi.WebSocket)
   :async:


   Websocket endpoint for device communication (legacy). Used for old way over acquisition-manager.

   Args
   ----
       websocket (WebSocket): The WebSocket connection object.


