device-manager.app.api.devices
==============================

.. py:module:: device-manager.app.api.devices

.. autoapi-nested-parse::

   Device API Endpoints.

   This module defines the API routes and WebSocket endpoints for managing devices.
   It includes functionalities for:
   - CRUD operations on devices.
   - Device registration and status updates via WebSocket.
   - Health readiness checks.

   Copyright (C) 2023, BRAIN-LINK UG (haftungsbeschrÃ¤nkt). All Rights Reserved.
   SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-ScanHub-Commercial



Attributes
----------

.. autoapisummary::

   device-manager.app.api.devices.router
   device-manager.app.api.devices.active_connections
   device-manager.app.api.devices.dict_id_websocket


Functions
---------

.. autoapisummary::

   device-manager.app.api.devices.readiness
   device-manager.app.api.devices.start_scan
   device-manager.app.api.devices.get_devices
   device-manager.app.api.devices.get_device_ip_address
   device-manager.app.api.devices.get_device
   device-manager.app.api.devices.get_device_status
   device-manager.app.api.devices.delete_device
   device-manager.app.api.devices.websocket_endpoint


Module Contents
---------------

.. py:data:: router

.. py:data:: active_connections
   :type:  list[fastapi.WebSocket]
   :value: []


.. py:data:: dict_id_websocket
   :type:  Dict[str, fastapi.WebSocket]

.. py:function:: readiness() -> dict
   :async:


   Readiness health endpoint.

   Checks if the service is ready to handle requests.

   Returns
   -------
   dict
       A dictionary with the readiness status.


.. py:function:: start_scan(device_id: str, header_xml: str, sequence_data: str, acquisition_data: str)
   :async:


   Start a scan on a connected device.

   Sends a command to a device via WebSocket to initiate a scan.

   Args
   ----
   device_id : str
       The unique identifier of the device.
   header_xml : str
       Metadata in XML format.
   sequence_data : str
       Data related to the scanning sequence.
   acquisition_data : str
       Data for scan acquisition.

   Raises
   ------
   HTTPException
       If the device is not found or not connected.



.. py:function:: get_devices() -> list[device-manager.app.api.models.DeviceOut]
   :async:


   Retrieve the list of registered devices.

   Returns
   -------
       List[Device]: The list of registered devices.


.. py:function:: get_device_ip_address(device_id: str)
   :async:


   Retrieve the IP address of a specific device.

   Args
   -------
       device_id (str): The ID of the device.

   Returns
   -------
       dict: The response containing the IP address of the device.


.. py:function:: get_device(device_id: str)
   :async:


   Retrieve a specific device.

   Args
   -------
       device_id (str): The ID of the device.

   Returns
   -------
       dict: The response containing the information about the device


.. py:function:: get_device_status(device_id: str)
   :async:


   Retrieve the status of a specific device.

   Args
   -------
       device_id (str): The ID of the device.

   Returns
   -------
       dict: The response containing the status of the device.


.. py:function:: delete_device(device_id: str)
   :async:


   Delete a device.

   Args
   -------
       device_id (str): The ID of the device.

   Returns
   -------
       dict: The response indicating the success or failure of the deletion.


.. py:function:: websocket_endpoint(websocket: fastapi.WebSocket)
   :async:


   Websocket endpoint for device communication.

   Args
   ----
       websocket (WebSocket): The WebSocket connection object.


